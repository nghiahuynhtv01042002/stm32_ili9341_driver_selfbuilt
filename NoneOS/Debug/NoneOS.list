
NoneOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002380  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025a2c  08002518  08002518  00003518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027f44  08027f44  0002900c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08027f44  08027f44  00028f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027f4c  08027f4c  0002900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027f4c  08027f4c  00028f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08027f50  08027f50  00028f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08027f54  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000000c  08027f60  0002900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08027f60  00029174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014984  00000000  00000000  0002903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6f  00000000  00000000  0003d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00040430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d23  00000000  00000000  00041208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016311  00000000  00000000  00041f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151ec  00000000  00000000  0005823c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c736  00000000  00000000  0006d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9b5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c8  00000000  00000000  000f9ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00008b96  00000000  00000000  000fc06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00104c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002500 	.word	0x08002500

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002500 	.word	0x08002500

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b510      	push	{r4, lr}
 8000506:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000508:	2210      	movs	r2, #16
 800050a:	2100      	movs	r1, #0
 800050c:	a80a      	add	r0, sp, #40	@ 0x28
 800050e:	f001 ffcb 	bl	80024a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000512:	2214      	movs	r2, #20
 8000514:	2100      	movs	r1, #0
 8000516:	a803      	add	r0, sp, #12
 8000518:	f001 ffc6 	bl	80024a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	4b1e      	ldr	r3, [pc, #120]	@ (8000598 <SystemClock_Config+0x94>)
 800051e:	2100      	movs	r1, #0
 8000520:	9101      	str	r1, [sp, #4]
 8000522:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000524:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000528:	641a      	str	r2, [r3, #64]	@ 0x40
 800052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	4b19      	ldr	r3, [pc, #100]	@ (800059c <SystemClock_Config+0x98>)
 8000536:	9102      	str	r1, [sp, #8]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000546:	9302      	str	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000548:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000550:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000554:	2402      	movs	r4, #2
 8000556:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800055a:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
 800055e:	2264      	movs	r2, #100	@ 0x64
 8000560:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000562:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000564:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000568:	e9cd 4312 	strd	r4, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f000 fd56 	bl	800101c <HAL_RCC_OscConfig>
 8000570:	b108      	cbz	r0, 8000576 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000572:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000574:	e7fe      	b.n	8000574 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000582:	2103      	movs	r1, #3
 8000584:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000586:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800058a:	f000 ff23 	bl	80013d4 <HAL_RCC_ClockConfig>
 800058e:	b108      	cbz	r0, 8000594 <SystemClock_Config+0x90>
 8000590:	b672      	cpsid	i
  while (1)
 8000592:	e7fe      	b.n	8000592 <SystemClock_Config+0x8e>
}
 8000594:	b014      	add	sp, #80	@ 0x50
 8000596:	bd10      	pop	{r4, pc}
 8000598:	40023800 	.word	0x40023800
 800059c:	40007000 	.word	0x40007000

080005a0 <main>:
{
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	b08f      	sub	sp, #60	@ 0x3c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a4:	4d84      	ldr	r5, [pc, #528]	@ (80007b8 <main+0x218>)
 80005a6:	2400      	movs	r4, #0
  HAL_Init();
 80005a8:	f000 fa62 	bl	8000a70 <HAL_Init>
  SystemClock_Config();
 80005ac:	f7ff ffaa 	bl	8000504 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	2214      	movs	r2, #20
 80005b2:	2100      	movs	r1, #0
 80005b4:	a809      	add	r0, sp, #36	@ 0x24
 80005b6:	f001 ff77 	bl	80024a8 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	9403      	str	r4, [sp, #12]
 80005bc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80005be:	487f      	ldr	r0, [pc, #508]	@ (80007bc <main+0x21c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c4:	632b      	str	r3, [r5, #48]	@ 0x30
 80005c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80005c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005cc:	9303      	str	r3, [sp, #12]
 80005ce:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	9404      	str	r4, [sp, #16]
 80005d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	632b      	str	r3, [r5, #48]	@ 0x30
 80005da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	9304      	str	r3, [sp, #16]
 80005e2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e4:	9405      	str	r4, [sp, #20]
 80005e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	632b      	str	r3, [r5, #48]	@ 0x30
 80005ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	9305      	str	r3, [sp, #20]
 80005f6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	9406      	str	r4, [sp, #24]
 80005fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	632b      	str	r3, [r5, #48]	@ 0x30
 8000602:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800060a:	4622      	mov	r2, r4
 800060c:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000610:	f000 fcfe 	bl	8001010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000614:	4622      	mov	r2, r4
 8000616:	486a      	ldr	r0, [pc, #424]	@ (80007c0 <main+0x220>)
 8000618:	2105      	movs	r1, #5
 800061a:	f000 fcf9 	bl	8001010 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2701      	movs	r7, #1
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000620:	4866      	ldr	r0, [pc, #408]	@ (80007bc <main+0x21c>)
 8000622:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000624:	2610      	movs	r6, #16
 8000626:	e9cd 6709 	strd	r6, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 800062e:	f000 fc29 	bl	8000e84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RESET_Pin|SPI1_NSS_Pin;
 8000632:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	4862      	ldr	r0, [pc, #392]	@ (80007c0 <main+0x220>)
 8000636:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000640:	f000 fc20 	bl	8000e84 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000644:	9402      	str	r4, [sp, #8]
 8000646:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000648:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800064c:	632b      	str	r3, [r5, #48]	@ 0x30
 800064e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  huart2.Init.BaudRate = 115200;
 8000650:	4d5c      	ldr	r5, [pc, #368]	@ (80007c4 <main+0x224>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000656:	4622      	mov	r2, r4
 8000658:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 800065a:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800065c:	203a      	movs	r0, #58	@ 0x3a
  __HAL_RCC_DMA2_CLK_ENABLE();
 800065e:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000660:	f000 fa58 	bl	8000b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000664:	203a      	movs	r0, #58	@ 0x3a
 8000666:	f000 fa87 	bl	8000b78 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 800066a:	4857      	ldr	r0, [pc, #348]	@ (80007c8 <main+0x228>)
  huart2.Init.BaudRate = 115200;
 800066c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000670:	e9c0 5300 	strd	r5, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	230c      	movs	r3, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067e:	6104      	str	r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000682:	f001 fbd9 	bl	8001e38 <HAL_UART_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	b108      	cbz	r0, 800068e <main+0xee>
 800068a:	b672      	cpsid	i
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0xec>
  hspi1.Instance = SPI1;
 800068e:	484f      	ldr	r0, [pc, #316]	@ (80007cc <main+0x22c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000690:	494f      	ldr	r1, [pc, #316]	@ (80007d0 <main+0x230>)
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000692:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000694:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000698:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a8:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ac:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 10;
 80006b0:	230a      	movs	r3, #10
 80006b2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006b4:	f000 ffe0 	bl	8001678 <HAL_SPI_Init>
 80006b8:	4605      	mov	r5, r0
 80006ba:	b108      	cbz	r0, 80006c0 <main+0x120>
 80006bc:	b672      	cpsid	i
  while (1)
 80006be:	e7fe      	b.n	80006be <main+0x11e>
  htim2.Instance = TIM2;
 80006c0:	4c44      	ldr	r4, [pc, #272]	@ (80007d4 <main+0x234>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	4632      	mov	r2, r6
 80006c4:	4601      	mov	r1, r0
 80006c6:	a809      	add	r0, sp, #36	@ 0x24
 80006c8:	f001 feee 	bl	80024a8 <memset>
  htim2.Init.Prescaler = 100-1;
 80006cc:	2363      	movs	r3, #99	@ 0x63
 80006ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006d2:	e9c4 2300 	strd	r2, r3, [r4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d6:	4620      	mov	r0, r4
  htim2.Init.Period = 50000-1;
 80006d8:	f24c 334f 	movw	r3, #49999	@ 0xc34f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	e9cd 5507 	strd	r5, r5, [sp, #28]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e4:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006e8:	f001 fa40 	bl	8001b6c <HAL_TIM_Base_Init>
 80006ec:	b108      	cbz	r0, 80006f2 <main+0x152>
 80006ee:	b672      	cpsid	i
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x150>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006f6:	a909      	add	r1, sp, #36	@ 0x24
 80006f8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fa:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006fc:	f001 fa6c 	bl	8001bd8 <HAL_TIM_ConfigClockSource>
 8000700:	b108      	cbz	r0, 8000706 <main+0x166>
 8000702:	b672      	cpsid	i
  while (1)
 8000704:	e7fe      	b.n	8000704 <main+0x164>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800070a:	a907      	add	r1, sp, #28
 800070c:	4620      	mov	r0, r4
 800070e:	f001 fafd 	bl	8001d0c <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4604      	mov	r4, r0
 8000714:	b108      	cbz	r0, 800071a <main+0x17a>
 8000716:	b672      	cpsid	i
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0x178>
  LCD_Init();
 800071a:	f001 fc9b 	bl	8002054 <LCD_Init>
  Draw_Big_N(ILI9341_WIDTH/4, ILI9341_HEIGHT/4, ILI9341_WIDTH/2, ILI9341_HEIGHT/2, RED);
 800071e:	f44f 4578 	mov.w	r5, #63488	@ 0xf800
  LCD_Clear(WHITE);
 8000722:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000726:	f001 fc89 	bl	800203c <LCD_Clear>
  Draw_Big_N(ILI9341_WIDTH/4, ILI9341_HEIGHT/4, ILI9341_WIDTH/2, ILI9341_HEIGHT/2, RED);
 800072a:	2378      	movs	r3, #120	@ 0x78
 800072c:	22a0      	movs	r2, #160	@ 0xa0
 800072e:	213c      	movs	r1, #60	@ 0x3c
 8000730:	9500      	str	r5, [sp, #0]
 8000732:	2050      	movs	r0, #80	@ 0x50
 8000734:	f001 fd95 	bl	8002262 <Draw_Big_N>
  HAL_Delay(1000);
 8000738:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800073c:	f000 f9c4 	bl	8000ac8 <HAL_Delay>
	Fill_Screen(RGB_TO_BGR(BLACK));
 8000740:	4620      	mov	r0, r4
 8000742:	f001 fe29 	bl	8002398 <Fill_Screen>
	HAL_Delay(1000);
 8000746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074a:	f000 f9bd 	bl	8000ac8 <HAL_Delay>
	Fill_Screen(RGB_TO_BGR(RED));
 800074e:	201f      	movs	r0, #31
 8000750:	f001 fe22 	bl	8002398 <Fill_Screen>
	HAL_Delay(1000);
 8000754:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000758:	f000 f9b6 	bl	8000ac8 <HAL_Delay>
	Fill_Screen(RGB_TO_BGR(GREEN));
 800075c:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000760:	f001 fe1a 	bl	8002398 <Fill_Screen>
	HAL_Delay(1000);
 8000764:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000768:	f000 f9ae 	bl	8000ac8 <HAL_Delay>
	Fill_Screen(RGB_TO_BGR(BLUE));
 800076c:	4628      	mov	r0, r5
 800076e:	f001 fe13 	bl	8002398 <Fill_Screen>
	HAL_Delay(1000);
 8000772:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000776:	f000 f9a7 	bl	8000ac8 <HAL_Delay>
	Fill_Screen(RGB_TO_BGR(YELLOW));
 800077a:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 800077e:	f001 fe0b 	bl	8002398 <Fill_Screen>
	HAL_Delay(1000);
 8000782:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000786:	f000 f99f 	bl	8000ac8 <HAL_Delay>
    LCD_DisplayString(30, 200, "STM32F411 + ILI9341", BLUE, BLACK);
 800078a:	4a13      	ldr	r2, [pc, #76]	@ (80007d8 <main+0x238>)
 800078c:	9400      	str	r4, [sp, #0]
 800078e:	231f      	movs	r3, #31
 8000790:	21c8      	movs	r1, #200	@ 0xc8
 8000792:	201e      	movs	r0, #30
 8000794:	f001 fde6 	bl	8002364 <LCD_DisplayString>
    LCD_DisplayString(30, 220, "Hello World!", RED, BLACK);
 8000798:	462b      	mov	r3, r5
 800079a:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <main+0x23c>)
 800079c:	9400      	str	r4, [sp, #0]
 800079e:	21dc      	movs	r1, #220	@ 0xdc
 80007a0:	201e      	movs	r0, #30
 80007a2:	f001 fddf 	bl	8002364 <LCD_DisplayString>
    LCD_DrawImage(0,0,&IMG);
 80007a6:	4620      	mov	r0, r4
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <main+0x240>)
 80007aa:	4621      	mov	r1, r4
 80007ac:	f001 fe30 	bl	8002410 <LCD_DrawImage>
}
 80007b0:	4620      	mov	r0, r4
 80007b2:	b00f      	add	sp, #60	@ 0x3c
 80007b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020800 	.word	0x40020800
 80007c0:	40020400 	.word	0x40020400
 80007c4:	40004400 	.word	0x40004400
 80007c8:	20000028 	.word	0x20000028
 80007cc:	20000118 	.word	0x20000118
 80007d0:	40013000 	.word	0x40013000
 80007d4:	20000070 	.word	0x20000070
 80007d8:	08002518 	.word	0x08002518
 80007dc:	0800252c 	.word	0x0800252c
 80007e0:	0800273c 	.word	0x0800273c

080007e4 <Error_Handler>:
 80007e4:	b672      	cpsid	i
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <Error_Handler+0x2>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <HAL_MspInit+0x34>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	9100      	str	r1, [sp, #0]
 80007f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80007f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80007f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80007fa:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80007fe:	9200      	str	r2, [sp, #0]
 8000800:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	9101      	str	r1, [sp, #4]
 8000804:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000806:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800080a:	641a      	str	r2, [r3, #64]	@ 0x40
 800080c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	b002      	add	sp, #8
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	4606      	mov	r6, r0
 8000824:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	2214      	movs	r2, #20
 8000828:	2100      	movs	r1, #0
 800082a:	a803      	add	r0, sp, #12
 800082c:	f001 fe3c 	bl	80024a8 <memset>
  if(hspi->Instance==SPI1)
 8000830:	6832      	ldr	r2, [r6, #0]
 8000832:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <HAL_SPI_MspInit+0xac>)
 8000834:	429a      	cmp	r2, r3
 8000836:	d147      	bne.n	80008c8 <HAL_SPI_MspInit+0xa8>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000838:	2500      	movs	r5, #0
 800083a:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800083e:	9501      	str	r5, [sp, #4]
 8000840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	4823      	ldr	r0, [pc, #140]	@ (80008d0 <HAL_SPI_MspInit+0xb0>)

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000844:	4c23      	ldr	r4, [pc, #140]	@ (80008d4 <HAL_SPI_MspInit+0xb4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000846:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800084a:	645a      	str	r2, [r3, #68]	@ 0x44
 800084c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800084e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8000852:	9201      	str	r2, [sp, #4]
 8000854:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	9502      	str	r5, [sp, #8]
 8000858:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800085a:	f042 0201 	orr.w	r2, r2, #1
 800085e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	9302      	str	r3, [sp, #8]
 8000868:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	22e0      	movs	r2, #224	@ 0xe0
 800086c:	2302      	movs	r3, #2
 800086e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000872:	2703      	movs	r7, #3
 8000874:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000878:	e9cd 7306 	strd	r7, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f000 fb02 	bl	8000e84 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000880:	4915      	ldr	r1, [pc, #84]	@ (80008d8 <HAL_SPI_MspInit+0xb8>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000882:	6225      	str	r5, [r4, #32]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000884:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000888:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800088c:	2340      	movs	r3, #64	@ 0x40
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800088e:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000896:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800089a:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800089c:	2304      	movs	r3, #4
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800089e:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80008a2:	e9c4 3709 	strd	r3, r7, [r4, #36]	@ 0x24
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80008a6:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80008aa:	f000 f99d 	bl	8000be8 <HAL_DMA_Init>
 80008ae:	b108      	cbz	r0, 80008b4 <HAL_SPI_MspInit+0x94>
    {
      Error_Handler();
 80008b0:	f7ff ff98 	bl	80007e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2023      	movs	r0, #35	@ 0x23
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80008b8:	64b4      	str	r4, [r6, #72]	@ 0x48
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008ba:	4611      	mov	r1, r2
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80008bc:	63a6      	str	r6, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008be:	f000 f929 	bl	8000b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008c2:	2023      	movs	r0, #35	@ 0x23
 80008c4:	f000 f958 	bl	8000b78 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008c8:	b009      	add	sp, #36	@ 0x24
 80008ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008cc:	40013000 	.word	0x40013000
 80008d0:	40020000 	.word	0x40020000
 80008d4:	200000b8 	.word	0x200000b8
 80008d8:	40026440 	.word	0x40026440

080008dc <HAL_TIM_Base_MspInit>:
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80008dc:	6803      	ldr	r3, [r0, #0]
 80008de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
{
 80008e2:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80008e4:	d116      	bne.n	8000914 <HAL_TIM_Base_MspInit+0x38>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008e6:	2200      	movs	r2, #0
 80008e8:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 80008ec:	9201      	str	r2, [sp, #4]
 80008ee:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80008f0:	f041 0101 	orr.w	r1, r1, #1
 80008f4:	6419      	str	r1, [r3, #64]	@ 0x40
 80008f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008fe:	4611      	mov	r1, r2
 8000900:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000902:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000904:	f000 f906 	bl	8000b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000908:	201c      	movs	r0, #28

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800090a:	b003      	add	sp, #12
 800090c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000910:	f000 b932 	b.w	8000b78 <HAL_NVIC_EnableIRQ>
}
 8000914:	b003      	add	sp, #12
 8000916:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800091c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b510      	push	{r4, lr}
 800091e:	4604      	mov	r4, r0
 8000920:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	2214      	movs	r2, #20
 8000924:	2100      	movs	r1, #0
 8000926:	a803      	add	r0, sp, #12
 8000928:	f001 fdbe 	bl	80024a8 <memset>
  if(huart->Instance==USART2)
 800092c:	6822      	ldr	r2, [r4, #0]
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_UART_MspInit+0x64>)
 8000930:	429a      	cmp	r2, r3
 8000932:	d122      	bne.n	800097a <HAL_UART_MspInit+0x5e>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000934:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8000938:	2100      	movs	r1, #0
 800093a:	9101      	str	r1, [sp, #4]
 800093c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	4811      	ldr	r0, [pc, #68]	@ (8000984 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000940:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000944:	641a      	str	r2, [r3, #64]	@ 0x40
 8000946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000948:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800094c:	9201      	str	r2, [sp, #4]
 800094e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	9102      	str	r1, [sp, #8]
 8000952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000954:	f042 0201 	orr.w	r2, r2, #1
 8000958:	631a      	str	r2, [r3, #48]	@ 0x30
 800095a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	9302      	str	r3, [sp, #8]
 8000962:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	220c      	movs	r2, #12
 8000966:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000968:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096e:	2307      	movs	r3, #7
 8000970:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	a903      	add	r1, sp, #12
 8000976:	f000 fa85 	bl	8000e84 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800097a:	b008      	add	sp, #32
 800097c:	bd10      	pop	{r4, pc}
 800097e:	bf00      	nop
 8000980:	40004400 	.word	0x40004400
 8000984:	40020000 	.word	0x40020000

08000988 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler>

0800098a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler>

0800098c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler>

0800098e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler>

08000990 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler>

08000992 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	4770      	bx	lr

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000994:	4770      	bx	lr

08000996 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 b884 	b.w	8000aa4 <HAL_IncTick>

0800099c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800099c:	4801      	ldr	r0, [pc, #4]	@ (80009a4 <TIM2_IRQHandler+0x8>)
 800099e:	f001 b80c 	b.w	80019ba <HAL_TIM_IRQHandler>
 80009a2:	bf00      	nop
 80009a4:	20000070 	.word	0x20000070

080009a8 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80009a8:	4801      	ldr	r0, [pc, #4]	@ (80009b0 <SPI1_IRQHandler+0x8>)
 80009aa:	f000 bf73 	b.w	8001894 <HAL_SPI_IRQHandler>
 80009ae:	bf00      	nop
 80009b0:	20000118 	.word	0x20000118

080009b4 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80009b4:	4801      	ldr	r0, [pc, #4]	@ (80009bc <DMA2_Stream2_IRQHandler+0x8>)
 80009b6:	f000 b9a7 	b.w	8000d08 <HAL_DMA_IRQHandler>
 80009ba:	bf00      	nop
 80009bc:	200000b8 	.word	0x200000b8

080009c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4a03      	ldr	r2, [pc, #12]	@ (80009d0 <SystemInit+0x10>)
 80009c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80009c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009d8:	f7ff fff2 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a02:	f001 fd59 	bl	80024b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a06:	f7ff fdcb 	bl	80005a0 <main>
  bx  lr    
 8000a0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a18:	08027f54 	.word	0x08027f54
  ldr r2, =_sbss
 8000a1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a20:	20000174 	.word	0x20000174

08000a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC_IRQHandler>
	...

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <HAL_InitTick+0x3c>)
 8000a2c:	781a      	ldrb	r2, [r3, #0]
 8000a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a36:	4a0c      	ldr	r2, [pc, #48]	@ (8000a68 <HAL_InitTick+0x40>)
{
 8000a38:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3a:	6810      	ldr	r0, [r2, #0]
 8000a3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a40:	f000 f8a8 	bl	8000b94 <HAL_SYSTICK_Config>
 8000a44:	4604      	mov	r4, r0
 8000a46:	b958      	cbnz	r0, 8000a60 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a48:	2d0f      	cmp	r5, #15
 8000a4a:	d809      	bhi.n	8000a60 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	4629      	mov	r1, r5
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f000 f85e 	bl	8000b14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <HAL_InitTick+0x44>)
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a5e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a60:	2001      	movs	r0, #1
 8000a62:	e7fc      	b.n	8000a5e <HAL_InitTick+0x36>
 8000a64:	20000004 	.word	0x20000004
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008

08000a70 <HAL_Init>:
{
 8000a70:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <HAL_Init+0x30>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a7a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a82:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a8a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f82f 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	200f      	movs	r0, #15
 8000a94:	f7ff ffc8 	bl	8000a28 <HAL_InitTick>
  HAL_MspInit();
 8000a98:	f7ff fea6 	bl	80007e8 <HAL_MspInit>
}
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	bd08      	pop	{r3, pc}
 8000aa0:	40023c00 	.word	0x40023c00

08000aa4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000aa4:	4a03      	ldr	r2, [pc, #12]	@ (8000ab4 <HAL_IncTick+0x10>)
 8000aa6:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <HAL_IncTick+0x14>)
 8000aa8:	6811      	ldr	r1, [r2, #0]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	440b      	add	r3, r1
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000170 	.word	0x20000170
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000abc:	4b01      	ldr	r3, [pc, #4]	@ (8000ac4 <HAL_GetTick+0x8>)
 8000abe:	6818      	ldr	r0, [r3, #0]
}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000170 	.word	0x20000170

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b538      	push	{r3, r4, r5, lr}
 8000aca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff fff6 	bl	8000abc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad2:	bf1c      	itt	ne
 8000ad4:	4b05      	ldrne	r3, [pc, #20]	@ (8000aec <HAL_Delay+0x24>)
 8000ad6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000ada:	bf18      	it	ne
 8000adc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ade:	f7ff ffed 	bl	8000abc <HAL_GetTick>
 8000ae2:	1b43      	subs	r3, r0, r5
 8000ae4:	42a3      	cmp	r3, r4
 8000ae6:	d3fa      	bcc.n	8000ade <HAL_Delay+0x16>
  {
  }
}
 8000ae8:	bd38      	pop	{r3, r4, r5, pc}
 8000aea:	bf00      	nop
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4907      	ldr	r1, [pc, #28]	@ (8000b10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000af2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b00:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000b0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b16:	b530      	push	{r4, r5, lr}
 8000b18:	68dc      	ldr	r4, [r3, #12]
 8000b1a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	bf28      	it	cs
 8000b28:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b30:	bf8c      	ite	hi
 8000b32:	3c03      	subhi	r4, #3
 8000b34:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b36:	fa05 f303 	lsl.w	r3, r5, r3
 8000b3a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3e:	40a5      	lsls	r5, r4
 8000b40:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000b46:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	bfac      	ite	ge
 8000b4e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	4a08      	ldrlt	r2, [pc, #32]	@ (8000b74 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	bfb8      	it	lt
 8000b5a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	bfaa      	itet	ge
 8000b62:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b6c:	bd30      	pop	{r4, r5, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	e000ed14 	.word	0xe000ed14

08000b78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	db07      	blt.n	8000b8c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <HAL_NVIC_EnableIRQ+0x18>)
 8000b7e:	0941      	lsrs	r1, r0, #5
 8000b80:	2301      	movs	r3, #1
 8000b82:	f000 001f 	and.w	r0, r0, #31
 8000b86:	4083      	lsls	r3, r0
 8000b88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b94:	3801      	subs	r0, #1
 8000b96:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b9a:	d20b      	bcs.n	8000bb4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	21f0      	movs	r1, #240	@ 0xf0
 8000ba6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000baa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bac:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bae:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bb4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000bbc:	6803      	ldr	r3, [r0, #0]
{
 8000bbe:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000bc0:	4c08      	ldr	r4, [pc, #32]	@ (8000be4 <DMA_CalcBaseAndBitshift+0x28>)
{
 8000bc2:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000bc4:	b2d9      	uxtb	r1, r3
 8000bc6:	3910      	subs	r1, #16
 8000bc8:	2018      	movs	r0, #24
 8000bca:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000bce:	5c20      	ldrb	r0, [r4, r0]
 8000bd0:	65d0      	str	r0, [r2, #92]	@ 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000bd2:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8000bd6:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8000bda:	295f      	cmp	r1, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000bdc:	bf88      	it	hi
 8000bde:	3004      	addhi	r0, #4
 8000be0:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000be2:	bd10      	pop	{r4, pc}
 8000be4:	08002551 	.word	0x08002551

08000be8 <HAL_DMA_Init>:
{
 8000be8:	b570      	push	{r4, r5, r6, lr}
 8000bea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bec:	f7ff ff66 	bl	8000abc <HAL_GetTick>
 8000bf0:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d060      	beq.n	8000cb8 <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_DMA_DISABLE(hdma);
 8000bfc:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000c04:	6813      	ldr	r3, [r2, #0]
 8000c06:	f023 0301 	bic.w	r3, r3, #1
 8000c0a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c0c:	6822      	ldr	r2, [r4, #0]
 8000c0e:	6813      	ldr	r3, [r2, #0]
 8000c10:	07d8      	lsls	r0, r3, #31
 8000c12:	d42e      	bmi.n	8000c72 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8000c14:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c16:	4832      	ldr	r0, [pc, #200]	@ (8000ce0 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c18:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c1a:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c1c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8000c20:	432b      	orrs	r3, r5
 8000c22:	68e5      	ldr	r5, [r4, #12]
 8000c24:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c26:	6925      	ldr	r5, [r4, #16]
 8000c28:	432b      	orrs	r3, r5
 8000c2a:	6965      	ldr	r5, [r4, #20]
 8000c2c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c2e:	69e5      	ldr	r5, [r4, #28]
 8000c30:	430b      	orrs	r3, r1
 8000c32:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c34:	6a25      	ldr	r5, [r4, #32]
 8000c36:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c38:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c3a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c3c:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000c3e:	bf02      	ittt	eq
 8000c40:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8000c44:	4335      	orreq	r5, r6
 8000c46:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000c48:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8000c4a:	6953      	ldr	r3, [r2, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c4c:	2804      	cmp	r0, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000c4e:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000c52:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c56:	d135      	bne.n	8000cc4 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 8000c58:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000c5a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000c5c:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000c5e:	b38d      	cbz	r5, 8000cc4 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000c60:	b991      	cbnz	r1, 8000c88 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8000c62:	2801      	cmp	r0, #1
 8000c64:	d020      	beq.n	8000ca8 <HAL_DMA_Init+0xc0>
 8000c66:	f030 0102 	bics.w	r1, r0, #2
 8000c6a:	d12b      	bne.n	8000cc4 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c6c:	01e9      	lsls	r1, r5, #7
 8000c6e:	d529      	bpl.n	8000cc4 <HAL_DMA_Init+0xdc>
 8000c70:	e01d      	b.n	8000cae <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c72:	f7ff ff23 	bl	8000abc <HAL_GetTick>
 8000c76:	1b40      	subs	r0, r0, r5
 8000c78:	2805      	cmp	r0, #5
 8000c7a:	d9c7      	bls.n	8000c0c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c7c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c7e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c80:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c82:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000c88:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8000c8c:	d116      	bne.n	8000cbc <HAL_DMA_Init+0xd4>
    switch (tmp)
 8000c8e:	2803      	cmp	r0, #3
 8000c90:	d818      	bhi.n	8000cc4 <HAL_DMA_Init+0xdc>
 8000c92:	a101      	add	r1, pc, #4	@ (adr r1, 8000c98 <HAL_DMA_Init+0xb0>)
 8000c94:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8000c98:	08000caf 	.word	0x08000caf
 8000c9c:	08000c6d 	.word	0x08000c6d
 8000ca0:	08000caf 	.word	0x08000caf
 8000ca4:	08000ca9 	.word	0x08000ca9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ca8:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8000cac:	d10a      	bne.n	8000cc4 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000cae:	2340      	movs	r3, #64	@ 0x40
 8000cb0:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8000cb8:	2001      	movs	r0, #1
 8000cba:	e7e4      	b.n	8000c86 <HAL_DMA_Init+0x9e>
    switch (tmp)
 8000cbc:	2802      	cmp	r0, #2
 8000cbe:	d9f6      	bls.n	8000cae <HAL_DMA_Init+0xc6>
 8000cc0:	2803      	cmp	r0, #3
 8000cc2:	d0d3      	beq.n	8000c6c <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8000cc4:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f7ff ff78 	bl	8000bbc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ccc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000cce:	233f      	movs	r3, #63	@ 0x3f
 8000cd0:	4093      	lsls	r3, r2
 8000cd2:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cd4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000cd6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cd8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000cda:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8000cde:	e7d2      	b.n	8000c86 <HAL_DMA_Init+0x9e>
 8000ce0:	f010803f 	.word	0xf010803f

08000ce4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ce4:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d003      	beq.n	8000cf4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cec:	2380      	movs	r3, #128	@ 0x80
 8000cee:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000cf4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8000cfc:	6813      	ldr	r3, [r2, #0]
 8000cfe:	f023 0301 	bic.w	r3, r3, #1
 8000d02:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000d04:	2000      	movs	r0, #0
}
 8000d06:	4770      	bx	lr

08000d08 <HAL_DMA_IRQHandler>:
{
 8000d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000d0e:	4b5c      	ldr	r3, [pc, #368]	@ (8000e80 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d10:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000d12:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d14:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8000d16:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d18:	2208      	movs	r2, #8
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	4232      	tst	r2, r6
{
 8000d1e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d20:	d00c      	beq.n	8000d3c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000d22:	6801      	ldr	r1, [r0, #0]
 8000d24:	6808      	ldr	r0, [r1, #0]
 8000d26:	0740      	lsls	r0, r0, #29
 8000d28:	d508      	bpl.n	8000d3c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000d2a:	6808      	ldr	r0, [r1, #0]
 8000d2c:	f020 0004 	bic.w	r0, r0, #4
 8000d30:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000d32:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000d34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000d36:	f042 0201 	orr.w	r2, r2, #1
 8000d3a:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	4232      	tst	r2, r6
 8000d42:	d008      	beq.n	8000d56 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000d44:	6821      	ldr	r1, [r4, #0]
 8000d46:	6949      	ldr	r1, [r1, #20]
 8000d48:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000d4a:	bf41      	itttt	mi
 8000d4c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000d4e:	6d62      	ldrmi	r2, [r4, #84]	@ 0x54
 8000d50:	f042 0202 	orrmi.w	r2, r2, #2
 8000d54:	6562      	strmi	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d56:	2204      	movs	r2, #4
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	4232      	tst	r2, r6
 8000d5c:	d008      	beq.n	8000d70 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000d5e:	6821      	ldr	r1, [r4, #0]
 8000d60:	6809      	ldr	r1, [r1, #0]
 8000d62:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000d64:	bf41      	itttt	mi
 8000d66:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000d68:	6d62      	ldrmi	r2, [r4, #84]	@ 0x54
 8000d6a:	f042 0204 	orrmi.w	r2, r2, #4
 8000d6e:	6562      	strmi	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000d70:	2210      	movs	r2, #16
 8000d72:	409a      	lsls	r2, r3
 8000d74:	4232      	tst	r2, r6
 8000d76:	d010      	beq.n	8000d9a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	6819      	ldr	r1, [r3, #0]
 8000d7c:	0709      	lsls	r1, r1, #28
 8000d7e:	d50c      	bpl.n	8000d9a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000d80:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	0350      	lsls	r0, r2, #13
 8000d86:	d537      	bpl.n	8000df8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	0319      	lsls	r1, r3, #12
 8000d8c:	d401      	bmi.n	8000d92 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000d8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d90:	e000      	b.n	8000d94 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000d92:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000d94:	b10b      	cbz	r3, 8000d9a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000d96:	4620      	mov	r0, r4
 8000d98:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d9a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8000d9c:	2220      	movs	r2, #32
 8000d9e:	408a      	lsls	r2, r1
 8000da0:	4232      	tst	r2, r6
 8000da2:	d03a      	beq.n	8000e1a <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	06c6      	lsls	r6, r0, #27
 8000daa:	d536      	bpl.n	8000e1a <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000dac:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000dae:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8000db2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000db4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000db6:	d127      	bne.n	8000e08 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000db8:	f022 0216 	bic.w	r2, r2, #22
 8000dbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000dbe:	695a      	ldr	r2, [r3, #20]
 8000dc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000dc4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dc6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000dc8:	b90a      	cbnz	r2, 8000dce <HAL_DMA_IRQHandler+0xc6>
 8000dca:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8000dcc:	b11a      	cbz	r2, 8000dd6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	f022 0208 	bic.w	r2, r2, #8
 8000dd4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dd6:	233f      	movs	r3, #63	@ 0x3f
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000de2:	2300      	movs	r3, #0
 8000de4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8000de8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d045      	beq.n	8000e7a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8000dee:	4620      	mov	r0, r4
}
 8000df0:	b003      	add	sp, #12
 8000df2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8000df6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dfc:	bf5e      	ittt	pl
 8000dfe:	681a      	ldrpl	r2, [r3, #0]
 8000e00:	f022 0208 	bicpl.w	r2, r2, #8
 8000e04:	601a      	strpl	r2, [r3, #0]
 8000e06:	e7c2      	b.n	8000d8e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e08:	0350      	lsls	r0, r2, #13
 8000e0a:	d527      	bpl.n	8000e5c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	0319      	lsls	r1, r3, #12
 8000e10:	d431      	bmi.n	8000e76 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8000e12:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 8000e14:	b10b      	cbz	r3, 8000e1a <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8000e16:	4620      	mov	r0, r4
 8000e18:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000e1a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000e1c:	b36b      	cbz	r3, 8000e7a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000e1e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000e20:	07da      	lsls	r2, r3, #31
 8000e22:	d519      	bpl.n	8000e58 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8000e24:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e26:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000e2a:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8000e2e:	2305      	movs	r3, #5
 8000e30:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8000e34:	6813      	ldr	r3, [r2, #0]
 8000e36:	f023 0301 	bic.w	r3, r3, #1
 8000e3a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000e3c:	9b01      	ldr	r3, [sp, #4]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	42bb      	cmp	r3, r7
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	d802      	bhi.n	8000e4c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000e46:	6813      	ldr	r3, [r2, #0]
 8000e48:	07db      	lsls	r3, r3, #31
 8000e4a:	d4f7      	bmi.n	8000e3c <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8000e52:	2300      	movs	r3, #0
 8000e54:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8000e58:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000e5a:	e7c6      	b.n	8000dea <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 8000e62:	d108      	bne.n	8000e76 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000e64:	6819      	ldr	r1, [r3, #0]
 8000e66:	f021 0110 	bic.w	r1, r1, #16
 8000e6a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8000e72:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8000e76:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000e78:	e7cc      	b.n	8000e14 <HAL_DMA_IRQHandler+0x10c>
}
 8000e7a:	b003      	add	sp, #12
 8000e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000000 	.word	0x20000000

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e88:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 800100c <HAL_GPIO_Init+0x188>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8c:	4a5d      	ldr	r2, [pc, #372]	@ (8001004 <HAL_GPIO_Init+0x180>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e90:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000e92:	2401      	movs	r4, #1
 8000e94:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8000e9a:	43ac      	bics	r4, r5
 8000e9c:	f040 80a3 	bne.w	8000fe6 <HAL_GPIO_Init+0x162>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea0:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea2:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea4:	f005 0403 	and.w	r4, r5, #3
 8000ea8:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eac:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb0:	1e67      	subs	r7, r4, #1
 8000eb2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb4:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb8:	d834      	bhi.n	8000f24 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000eba:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ebc:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec0:	68cf      	ldr	r7, [r1, #12]
 8000ec2:	fa07 f708 	lsl.w	r7, r7, r8
 8000ec6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000eca:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ecc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ece:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000ed6:	409f      	lsls	r7, r3
 8000ed8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000edc:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000ede:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee0:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee4:	688f      	ldr	r7, [r1, #8]
 8000ee6:	fa07 f708 	lsl.w	r7, r7, r8
 8000eea:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eee:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000ef0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	d119      	bne.n	8000f28 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000ef4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ef8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000f00:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f04:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f08:	f04f 0e0f 	mov.w	lr, #15
 8000f0c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000f10:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f14:	690f      	ldr	r7, [r1, #16]
 8000f16:	fa07 f70b 	lsl.w	r7, r7, fp
 8000f1a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000f1e:	f8ca 7020 	str.w	r7, [sl, #32]
 8000f22:	e001      	b.n	8000f28 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f24:	2c03      	cmp	r4, #3
 8000f26:	d1da      	bne.n	8000ede <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000f28:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f2a:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f2e:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f32:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f34:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8000f38:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f3a:	d054      	beq.n	8000fe6 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	9401      	str	r4, [sp, #4]
 8000f40:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000f44:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000f48:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8000f4c:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000f50:	f023 0703 	bic.w	r7, r3, #3
 8000f54:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8000f58:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8000f5c:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8000f60:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f62:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f68:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f6c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f70:	240f      	movs	r4, #15
 8000f72:	fa04 f40c 	lsl.w	r4, r4, ip
 8000f76:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7a:	4c23      	ldr	r4, [pc, #140]	@ (8001008 <HAL_GPIO_Init+0x184>)
 8000f7c:	42a0      	cmp	r0, r4
 8000f7e:	d039      	beq.n	8000ff4 <HAL_GPIO_Init+0x170>
 8000f80:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000f84:	42a0      	cmp	r0, r4
 8000f86:	d037      	beq.n	8000ff8 <HAL_GPIO_Init+0x174>
 8000f88:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000f8c:	42a0      	cmp	r0, r4
 8000f8e:	d035      	beq.n	8000ffc <HAL_GPIO_Init+0x178>
 8000f90:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000f94:	42a0      	cmp	r0, r4
 8000f96:	d033      	beq.n	8001000 <HAL_GPIO_Init+0x17c>
 8000f98:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000f9c:	42a0      	cmp	r0, r4
 8000f9e:	bf14      	ite	ne
 8000fa0:	2407      	movne	r4, #7
 8000fa2:	2404      	moveq	r4, #4
 8000fa4:	fa04 f40c 	lsl.w	r4, r4, ip
 8000fa8:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fac:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8000fae:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fb2:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	bf0c      	ite	eq
 8000fb8:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000fba:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8000fbc:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000fbe:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc0:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	bf0c      	ite	eq
 8000fc6:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000fc8:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8000fca:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000fcc:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fce:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	bf0c      	ite	eq
 8000fd4:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000fd6:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8000fd8:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fda:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fdc:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000fde:	bf54      	ite	pl
 8000fe0:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8000fe2:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8000fe4:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	2b10      	cmp	r3, #16
 8000fea:	f47f af51 	bne.w	8000e90 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000fee:	b003      	add	sp, #12
 8000ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff4:	2400      	movs	r4, #0
 8000ff6:	e7d5      	b.n	8000fa4 <HAL_GPIO_Init+0x120>
 8000ff8:	2401      	movs	r4, #1
 8000ffa:	e7d3      	b.n	8000fa4 <HAL_GPIO_Init+0x120>
 8000ffc:	2402      	movs	r4, #2
 8000ffe:	e7d1      	b.n	8000fa4 <HAL_GPIO_Init+0x120>
 8001000:	2403      	movs	r4, #3
 8001002:	e7cf      	b.n	8000fa4 <HAL_GPIO_Init+0x120>
 8001004:	40013c00 	.word	0x40013c00
 8001008:	40020000 	.word	0x40020000
 800100c:	40023800 	.word	0x40023800

08001010 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001010:	b10a      	cbz	r2, 8001016 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001012:	6181      	str	r1, [r0, #24]
  }
}
 8001014:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001016:	0409      	lsls	r1, r1, #16
 8001018:	e7fb      	b.n	8001012 <HAL_GPIO_WritePin+0x2>
	...

0800101c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800101c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001020:	4604      	mov	r4, r0
 8001022:	b340      	cbz	r0, 8001076 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001024:	6803      	ldr	r3, [r0, #0]
 8001026:	07de      	lsls	r6, r3, #31
 8001028:	d410      	bmi.n	800104c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	079d      	lsls	r5, r3, #30
 800102e:	d45b      	bmi.n	80010e8 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	0719      	lsls	r1, r3, #28
 8001034:	f100 809d 	bmi.w	8001172 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	075a      	lsls	r2, r3, #29
 800103c:	f100 80bd 	bmi.w	80011ba <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001040:	69a3      	ldr	r3, [r4, #24]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 8124 	bne.w	8001290 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001048:	2000      	movs	r0, #0
 800104a:	e02c      	b.n	80010a6 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800104c:	4b8d      	ldr	r3, [pc, #564]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	f002 020c 	and.w	r2, r2, #12
 8001054:	2a04      	cmp	r2, #4
 8001056:	d007      	beq.n	8001068 <HAL_RCC_OscConfig+0x4c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800105e:	2a08      	cmp	r2, #8
 8001060:	d10b      	bne.n	800107a <HAL_RCC_OscConfig+0x5e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	0259      	lsls	r1, r3, #9
 8001066:	d508      	bpl.n	800107a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	4b86      	ldr	r3, [pc, #536]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	039a      	lsls	r2, r3, #14
 800106e:	d5dc      	bpl.n	800102a <HAL_RCC_OscConfig+0xe>
 8001070:	6863      	ldr	r3, [r4, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1d9      	bne.n	800102a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001076:	2001      	movs	r0, #1
 8001078:	e015      	b.n	80010a6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800107a:	6863      	ldr	r3, [r4, #4]
 800107c:	4d81      	ldr	r5, [pc, #516]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
 800107e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001082:	d113      	bne.n	80010ac <HAL_RCC_OscConfig+0x90>
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800108a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800108c:	f7ff fd16 	bl	8000abc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001090:	4e7c      	ldr	r6, [pc, #496]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8001092:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001094:	6833      	ldr	r3, [r6, #0]
 8001096:	039b      	lsls	r3, r3, #14
 8001098:	d4c7      	bmi.n	800102a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800109a:	f7ff fd0f 	bl	8000abc <HAL_GetTick>
 800109e:	1b40      	subs	r0, r0, r5
 80010a0:	2864      	cmp	r0, #100	@ 0x64
 80010a2:	d9f7      	bls.n	8001094 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80010a4:	2003      	movs	r0, #3
}
 80010a6:	b002      	add	sp, #8
 80010a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010b0:	d104      	bne.n	80010bc <HAL_RCC_OscConfig+0xa0>
 80010b2:	682b      	ldr	r3, [r5, #0]
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010b8:	602b      	str	r3, [r5, #0]
 80010ba:	e7e3      	b.n	8001084 <HAL_RCC_OscConfig+0x68>
 80010bc:	682a      	ldr	r2, [r5, #0]
 80010be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80010c2:	602a      	str	r2, [r5, #0]
 80010c4:	682a      	ldr	r2, [r5, #0]
 80010c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80010ca:	602a      	str	r2, [r5, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1dd      	bne.n	800108c <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 80010d0:	f7ff fcf4 	bl	8000abc <HAL_GetTick>
 80010d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d6:	682b      	ldr	r3, [r5, #0]
 80010d8:	039f      	lsls	r7, r3, #14
 80010da:	d5a6      	bpl.n	800102a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010dc:	f7ff fcee 	bl	8000abc <HAL_GetTick>
 80010e0:	1b80      	subs	r0, r0, r6
 80010e2:	2864      	cmp	r0, #100	@ 0x64
 80010e4:	d9f7      	bls.n	80010d6 <HAL_RCC_OscConfig+0xba>
 80010e6:	e7dd      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010e8:	4b66      	ldr	r3, [pc, #408]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	f012 0f0c 	tst.w	r2, #12
 80010f0:	d007      	beq.n	8001102 <HAL_RCC_OscConfig+0xe6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010f8:	2a08      	cmp	r2, #8
 80010fa:	d111      	bne.n	8001120 <HAL_RCC_OscConfig+0x104>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	025d      	lsls	r5, r3, #9
 8001100:	d40e      	bmi.n	8001120 <HAL_RCC_OscConfig+0x104>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001102:	4a60      	ldr	r2, [pc, #384]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
 8001104:	6813      	ldr	r3, [r2, #0]
 8001106:	0799      	lsls	r1, r3, #30
 8001108:	d502      	bpl.n	8001110 <HAL_RCC_OscConfig+0xf4>
 800110a:	68e3      	ldr	r3, [r4, #12]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d1b2      	bne.n	8001076 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001110:	6813      	ldr	r3, [r2, #0]
 8001112:	6921      	ldr	r1, [r4, #16]
 8001114:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001118:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800111c:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	e787      	b.n	8001030 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001120:	68e2      	ldr	r2, [r4, #12]
 8001122:	4b59      	ldr	r3, [pc, #356]	@ (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001124:	b1b2      	cbz	r2, 8001154 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800112a:	f7ff fcc7 	bl	8000abc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112e:	4d55      	ldr	r5, [pc, #340]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8001130:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001132:	682b      	ldr	r3, [r5, #0]
 8001134:	079b      	lsls	r3, r3, #30
 8001136:	d507      	bpl.n	8001148 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	6922      	ldr	r2, [r4, #16]
 800113c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001140:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001144:	602b      	str	r3, [r5, #0]
 8001146:	e773      	b.n	8001030 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001148:	f7ff fcb8 	bl	8000abc <HAL_GetTick>
 800114c:	1b80      	subs	r0, r0, r6
 800114e:	2802      	cmp	r0, #2
 8001150:	d9ef      	bls.n	8001132 <HAL_RCC_OscConfig+0x116>
 8001152:	e7a7      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8001154:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001156:	f7ff fcb1 	bl	8000abc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	4e4a      	ldr	r6, [pc, #296]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800115c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115e:	6833      	ldr	r3, [r6, #0]
 8001160:	079f      	lsls	r7, r3, #30
 8001162:	f57f af65 	bpl.w	8001030 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001166:	f7ff fca9 	bl	8000abc <HAL_GetTick>
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	2802      	cmp	r0, #2
 800116e:	d9f6      	bls.n	800115e <HAL_RCC_OscConfig+0x142>
 8001170:	e798      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001172:	6962      	ldr	r2, [r4, #20]
 8001174:	4b44      	ldr	r3, [pc, #272]	@ (8001288 <HAL_RCC_OscConfig+0x26c>)
 8001176:	b182      	cbz	r2, 800119a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001178:	2201      	movs	r2, #1
 800117a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800117e:	f7ff fc9d 	bl	8000abc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001182:	4e40      	ldr	r6, [pc, #256]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8001184:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001186:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001188:	079b      	lsls	r3, r3, #30
 800118a:	f53f af55 	bmi.w	8001038 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800118e:	f7ff fc95 	bl	8000abc <HAL_GetTick>
 8001192:	1b40      	subs	r0, r0, r5
 8001194:	2802      	cmp	r0, #2
 8001196:	d9f6      	bls.n	8001186 <HAL_RCC_OscConfig+0x16a>
 8001198:	e784      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800119a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800119e:	f7ff fc8d 	bl	8000abc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a2:	4e38      	ldr	r6, [pc, #224]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80011a4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a6:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80011a8:	079f      	lsls	r7, r3, #30
 80011aa:	f57f af45 	bpl.w	8001038 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ae:	f7ff fc85 	bl	8000abc <HAL_GetTick>
 80011b2:	1b40      	subs	r0, r0, r5
 80011b4:	2802      	cmp	r0, #2
 80011b6:	d9f6      	bls.n	80011a6 <HAL_RCC_OscConfig+0x18a>
 80011b8:	e774      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ba:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
 80011bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011be:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 80011c2:	d128      	bne.n	8001216 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	9201      	str	r2, [sp, #4]
 80011c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011c8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80011cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011d8:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011da:	4d2c      	ldr	r5, [pc, #176]	@ (800128c <HAL_RCC_OscConfig+0x270>)
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	05d8      	lsls	r0, r3, #23
 80011e0:	d51b      	bpl.n	800121a <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e2:	68a3      	ldr	r3, [r4, #8]
 80011e4:	4d27      	ldr	r5, [pc, #156]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d127      	bne.n	800123a <HAL_RCC_OscConfig+0x21e>
 80011ea:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80011f2:	f7ff fc63 	bl	8000abc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f6:	4e23      	ldr	r6, [pc, #140]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80011f8:	4605      	mov	r5, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fa:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fe:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001200:	079a      	lsls	r2, r3, #30
 8001202:	d539      	bpl.n	8001278 <HAL_RCC_OscConfig+0x25c>
    if (pwrclkchanged == SET)
 8001204:	2f00      	cmp	r7, #0
 8001206:	f43f af1b 	beq.w	8001040 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800120a:	4a1e      	ldr	r2, [pc, #120]	@ (8001284 <HAL_RCC_OscConfig+0x268>)
 800120c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800120e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	@ 0x40
 8001214:	e714      	b.n	8001040 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001216:	2700      	movs	r7, #0
 8001218:	e7df      	b.n	80011da <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800121a:	682b      	ldr	r3, [r5, #0]
 800121c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001220:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001222:	f7ff fc4b 	bl	8000abc <HAL_GetTick>
 8001226:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	05d9      	lsls	r1, r3, #23
 800122c:	d4d9      	bmi.n	80011e2 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122e:	f7ff fc45 	bl	8000abc <HAL_GetTick>
 8001232:	1b80      	subs	r0, r0, r6
 8001234:	2802      	cmp	r0, #2
 8001236:	d9f7      	bls.n	8001228 <HAL_RCC_OscConfig+0x20c>
 8001238:	e734      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123a:	2b05      	cmp	r3, #5
 800123c:	d104      	bne.n	8001248 <HAL_RCC_OscConfig+0x22c>
 800123e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	672b      	str	r3, [r5, #112]	@ 0x70
 8001246:	e7d0      	b.n	80011ea <HAL_RCC_OscConfig+0x1ce>
 8001248:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	672a      	str	r2, [r5, #112]	@ 0x70
 8001250:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8001252:	f022 0204 	bic.w	r2, r2, #4
 8001256:	672a      	str	r2, [r5, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1ca      	bne.n	80011f2 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 800125c:	f7ff fc2e 	bl	8000abc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001260:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001264:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001266:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001268:	079b      	lsls	r3, r3, #30
 800126a:	d5cb      	bpl.n	8001204 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126c:	f7ff fc26 	bl	8000abc <HAL_GetTick>
 8001270:	1b80      	subs	r0, r0, r6
 8001272:	4540      	cmp	r0, r8
 8001274:	d9f7      	bls.n	8001266 <HAL_RCC_OscConfig+0x24a>
 8001276:	e715      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001278:	f7ff fc20 	bl	8000abc <HAL_GetTick>
 800127c:	1b40      	subs	r0, r0, r5
 800127e:	4540      	cmp	r0, r8
 8001280:	d9bd      	bls.n	80011fe <HAL_RCC_OscConfig+0x1e2>
 8001282:	e70f      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
 8001284:	40023800 	.word	0x40023800
 8001288:	42470000 	.word	0x42470000
 800128c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001290:	4d37      	ldr	r5, [pc, #220]	@ (8001370 <HAL_RCC_OscConfig+0x354>)
 8001292:	68aa      	ldr	r2, [r5, #8]
 8001294:	f002 020c 	and.w	r2, r2, #12
 8001298:	2a08      	cmp	r2, #8
 800129a:	d03e      	beq.n	800131a <HAL_RCC_OscConfig+0x2fe>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129c:	2b02      	cmp	r3, #2
 800129e:	4b35      	ldr	r3, [pc, #212]	@ (8001374 <HAL_RCC_OscConfig+0x358>)
 80012a0:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 80012a4:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a6:	d12b      	bne.n	8001300 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc08 	bl	8000abc <HAL_GetTick>
 80012ac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	0199      	lsls	r1, r3, #6
 80012b2:	d41f      	bmi.n	80012f4 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012b4:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80012bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012c0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80012c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012c6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80012c8:	0852      	lsrs	r2, r2, #1
 80012ca:	3a01      	subs	r2, #1
 80012cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012d0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80012d2:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <HAL_RCC_OscConfig+0x358>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d4:	4d26      	ldr	r5, [pc, #152]	@ (8001370 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 80012d6:	2201      	movs	r2, #1
 80012d8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80012da:	f7ff fbef 	bl	8000abc <HAL_GetTick>
 80012de:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	019a      	lsls	r2, r3, #6
 80012e4:	f53f aeb0 	bmi.w	8001048 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e8:	f7ff fbe8 	bl	8000abc <HAL_GetTick>
 80012ec:	1b00      	subs	r0, r0, r4
 80012ee:	2802      	cmp	r0, #2
 80012f0:	d9f6      	bls.n	80012e0 <HAL_RCC_OscConfig+0x2c4>
 80012f2:	e6d7      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f4:	f7ff fbe2 	bl	8000abc <HAL_GetTick>
 80012f8:	1b80      	subs	r0, r0, r6
 80012fa:	2802      	cmp	r0, #2
 80012fc:	d9d7      	bls.n	80012ae <HAL_RCC_OscConfig+0x292>
 80012fe:	e6d1      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8001300:	f7ff fbdc 	bl	8000abc <HAL_GetTick>
 8001304:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001306:	682b      	ldr	r3, [r5, #0]
 8001308:	019b      	lsls	r3, r3, #6
 800130a:	f57f ae9d 	bpl.w	8001048 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130e:	f7ff fbd5 	bl	8000abc <HAL_GetTick>
 8001312:	1b00      	subs	r0, r0, r4
 8001314:	2802      	cmp	r0, #2
 8001316:	d9f6      	bls.n	8001306 <HAL_RCC_OscConfig+0x2ea>
 8001318:	e6c4      	b.n	80010a4 <HAL_RCC_OscConfig+0x88>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800131a:	2b01      	cmp	r3, #1
 800131c:	f43f aeab 	beq.w	8001076 <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8001320:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001322:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001324:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001328:	4291      	cmp	r1, r2
 800132a:	f47f aea4 	bne.w	8001076 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001330:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001334:	428a      	cmp	r2, r1
 8001336:	f47f ae9e 	bne.w	8001076 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800133a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800133c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001340:	401a      	ands	r2, r3
 8001342:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001346:	f47f ae96 	bne.w	8001076 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800134a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800134c:	0852      	lsrs	r2, r2, #1
 800134e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001352:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001354:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001358:	f47f ae8d 	bne.w	8001076 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800135c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800135e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001362:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001366:	bf14      	ite	ne
 8001368:	2001      	movne	r0, #1
 800136a:	2000      	moveq	r0, #0
 800136c:	e69b      	b.n	80010a6 <HAL_RCC_OscConfig+0x8a>
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	42470000 	.word	0x42470000

08001378 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001378:	4913      	ldr	r1, [pc, #76]	@ (80013c8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800137a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800137c:	688b      	ldr	r3, [r1, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b04      	cmp	r3, #4
 8001384:	d01c      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x48>
 8001386:	2b08      	cmp	r3, #8
 8001388:	d11c      	bne.n	80013c4 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800138a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800138c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800138e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001390:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001394:	bf14      	ite	ne
 8001396:	480d      	ldrne	r0, [pc, #52]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001398:	480d      	ldreq	r0, [pc, #52]	@ (80013d0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800139a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800139e:	bf18      	it	ne
 80013a0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013a2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a6:	fba1 0100 	umull	r0, r1, r1, r0
 80013aa:	f7fe ff15 	bl	80001d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_RCC_GetSysClockFreq+0x50>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013b6:	3301      	adds	r3, #1
 80013b8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80013ba:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013be:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013c0:	4802      	ldr	r0, [pc, #8]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x54>)
 80013c2:	e7fc      	b.n	80013be <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80013c6:	e7fa      	b.n	80013be <HAL_RCC_GetSysClockFreq+0x46>
 80013c8:	40023800 	.word	0x40023800
 80013cc:	007a1200 	.word	0x007a1200
 80013d0:	00f42400 	.word	0x00f42400

080013d4 <HAL_RCC_ClockConfig>:
{
 80013d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80013da:	4604      	mov	r4, r0
 80013dc:	b910      	cbnz	r0, 80013e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013de:	2001      	movs	r0, #1
}
 80013e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4b43      	ldr	r3, [pc, #268]	@ (80014f4 <HAL_RCC_ClockConfig+0x120>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	f002 0207 	and.w	r2, r2, #7
 80013ec:	428a      	cmp	r2, r1
 80013ee:	d328      	bcc.n	8001442 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f0:	6821      	ldr	r1, [r4, #0]
 80013f2:	078f      	lsls	r7, r1, #30
 80013f4:	d42d      	bmi.n	8001452 <HAL_RCC_ClockConfig+0x7e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f6:	07c8      	lsls	r0, r1, #31
 80013f8:	d440      	bmi.n	800147c <HAL_RCC_ClockConfig+0xa8>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013fa:	4b3e      	ldr	r3, [pc, #248]	@ (80014f4 <HAL_RCC_ClockConfig+0x120>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	f002 0207 	and.w	r2, r2, #7
 8001402:	42aa      	cmp	r2, r5
 8001404:	d865      	bhi.n	80014d2 <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001406:	6822      	ldr	r2, [r4, #0]
 8001408:	0751      	lsls	r1, r2, #29
 800140a:	d46b      	bmi.n	80014e4 <HAL_RCC_ClockConfig+0x110>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800140c:	0713      	lsls	r3, r2, #28
 800140e:	d507      	bpl.n	8001420 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001410:	4a39      	ldr	r2, [pc, #228]	@ (80014f8 <HAL_RCC_ClockConfig+0x124>)
 8001412:	6921      	ldr	r1, [r4, #16]
 8001414:	6893      	ldr	r3, [r2, #8]
 8001416:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800141a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800141e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001420:	f7ff ffaa 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 8001424:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <HAL_RCC_ClockConfig+0x124>)
 8001426:	4a35      	ldr	r2, [pc, #212]	@ (80014fc <HAL_RCC_ClockConfig+0x128>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800142e:	5cd3      	ldrb	r3, [r2, r3]
 8001430:	40d8      	lsrs	r0, r3
 8001432:	4b33      	ldr	r3, [pc, #204]	@ (8001500 <HAL_RCC_ClockConfig+0x12c>)
 8001434:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001436:	4b33      	ldr	r3, [pc, #204]	@ (8001504 <HAL_RCC_ClockConfig+0x130>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	f7ff faf5 	bl	8000a28 <HAL_InitTick>
  return HAL_OK;
 800143e:	2000      	movs	r0, #0
 8001440:	e7ce      	b.n	80013e0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	428b      	cmp	r3, r1
 800144e:	d1c6      	bne.n	80013de <HAL_RCC_ClockConfig+0xa>
 8001450:	e7ce      	b.n	80013f0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001452:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <HAL_RCC_ClockConfig+0x124>)
 8001454:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001458:	bf1e      	ittt	ne
 800145a:	689a      	ldrne	r2, [r3, #8]
 800145c:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8001460:	609a      	strne	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001462:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001464:	bf42      	ittt	mi
 8001466:	689a      	ldrmi	r2, [r3, #8]
 8001468:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 800146c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	68a0      	ldr	r0, [r4, #8]
 8001472:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001476:	4302      	orrs	r2, r0
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	e7bc      	b.n	80013f6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147c:	6862      	ldr	r2, [r4, #4]
 800147e:	4b1e      	ldr	r3, [pc, #120]	@ (80014f8 <HAL_RCC_ClockConfig+0x124>)
 8001480:	2a01      	cmp	r2, #1
 8001482:	d11c      	bne.n	80014be <HAL_RCC_ClockConfig+0xea>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148a:	d0a8      	beq.n	80013de <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800148c:	4e1a      	ldr	r6, [pc, #104]	@ (80014f8 <HAL_RCC_ClockConfig+0x124>)
 800148e:	68b3      	ldr	r3, [r6, #8]
 8001490:	f023 0303 	bic.w	r3, r3, #3
 8001494:	4313      	orrs	r3, r2
 8001496:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001498:	f7ff fb10 	bl	8000abc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149c:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80014a0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a2:	68b3      	ldr	r3, [r6, #8]
 80014a4:	6862      	ldr	r2, [r4, #4]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014ae:	d0a4      	beq.n	80013fa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b0:	f7ff fb04 	bl	8000abc <HAL_GetTick>
 80014b4:	1bc0      	subs	r0, r0, r7
 80014b6:	4540      	cmp	r0, r8
 80014b8:	d9f3      	bls.n	80014a2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80014ba:	2003      	movs	r0, #3
 80014bc:	e790      	b.n	80013e0 <HAL_RCC_ClockConfig+0xc>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014be:	1e91      	subs	r1, r2, #2
 80014c0:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c2:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c4:	d802      	bhi.n	80014cc <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80014ca:	e7de      	b.n	800148a <HAL_RCC_ClockConfig+0xb6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	f013 0f02 	tst.w	r3, #2
 80014d0:	e7db      	b.n	800148a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	b2ea      	uxtb	r2, r5
 80014d4:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	42ab      	cmp	r3, r5
 80014de:	f47f af7e 	bne.w	80013de <HAL_RCC_ClockConfig+0xa>
 80014e2:	e790      	b.n	8001406 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e4:	4904      	ldr	r1, [pc, #16]	@ (80014f8 <HAL_RCC_ClockConfig+0x124>)
 80014e6:	68e0      	ldr	r0, [r4, #12]
 80014e8:	688b      	ldr	r3, [r1, #8]
 80014ea:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80014ee:	4303      	orrs	r3, r0
 80014f0:	608b      	str	r3, [r1, #8]
 80014f2:	e78b      	b.n	800140c <HAL_RCC_ClockConfig+0x38>
 80014f4:	40023c00 	.word	0x40023c00
 80014f8:	40023800 	.word	0x40023800
 80014fc:	08002541 	.word	0x08002541
 8001500:	20000000 	.word	0x20000000
 8001504:	20000008 	.word	0x20000008

08001508 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001508:	4b04      	ldr	r3, [pc, #16]	@ (800151c <HAL_RCC_GetPCLK1Freq+0x14>)
 800150a:	4a05      	ldr	r2, [pc, #20]	@ (8001520 <HAL_RCC_GetPCLK1Freq+0x18>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001512:	5cd3      	ldrb	r3, [r2, r3]
 8001514:	4a03      	ldr	r2, [pc, #12]	@ (8001524 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001516:	6810      	ldr	r0, [r2, #0]
}
 8001518:	40d8      	lsrs	r0, r3
 800151a:	4770      	bx	lr
 800151c:	40023800 	.word	0x40023800
 8001520:	08002539 	.word	0x08002539
 8001524:	20000000 	.word	0x20000000

08001528 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <HAL_RCC_GetPCLK2Freq+0x14>)
 800152a:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <HAL_RCC_GetPCLK2Freq+0x18>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	4a03      	ldr	r2, [pc, #12]	@ (8001544 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001536:	6810      	ldr	r0, [r2, #0]
}
 8001538:	40d8      	lsrs	r0, r3
 800153a:	4770      	bx	lr
 800153c:	40023800 	.word	0x40023800
 8001540:	08002539 	.word	0x08002539
 8001544:	20000000 	.word	0x20000000

08001548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001548:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800154c:	461f      	mov	r7, r3
 800154e:	4689      	mov	r9, r1
 8001550:	4690      	mov	r8, r2
 8001552:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001554:	f7ff fab2 	bl	8000abc <HAL_GetTick>
 8001558:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800155a:	443d      	add	r5, r7
 800155c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800155e:	f7ff faad 	bl	8000abc <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001562:	4b26      	ldr	r3, [pc, #152]	@ (80015fc <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8001564:	681e      	ldr	r6, [r3, #0]
 8001566:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 800156a:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 800156c:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800156e:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001570:	6822      	ldr	r2, [r4, #0]
 8001572:	6893      	ldr	r3, [r2, #8]
 8001574:	ea39 0303 	bics.w	r3, r9, r3
 8001578:	bf0c      	ite	eq
 800157a:	2301      	moveq	r3, #1
 800157c:	2300      	movne	r3, #0
 800157e:	4543      	cmp	r3, r8
 8001580:	d101      	bne.n	8001586 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8001582:	2000      	movs	r0, #0
 8001584:	e02e      	b.n	80015e4 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8001586:	1c7b      	adds	r3, r7, #1
 8001588:	d0f3      	beq.n	8001572 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800158a:	f7ff fa97 	bl	8000abc <HAL_GetTick>
 800158e:	eba0 000a 	sub.w	r0, r0, sl
 8001592:	42a8      	cmp	r0, r5
 8001594:	d329      	bcc.n	80015ea <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800159e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015a0:	6862      	ldr	r2, [r4, #4]
 80015a2:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80015a6:	d10a      	bne.n	80015be <SPI_WaitFlagStateUntilTimeout+0x76>
 80015a8:	68a2      	ldr	r2, [r4, #8]
 80015aa:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80015ae:	d002      	beq.n	80015b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80015b0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80015b4:	d103      	bne.n	80015be <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015bc:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80015be:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80015c0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80015c4:	d107      	bne.n	80015d6 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80015d4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80015dc:	2300      	movs	r3, #0
 80015de:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 80015e2:	2003      	movs	r0, #3
}
 80015e4:	b002      	add	sp, #8
 80015e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80015ea:	9a01      	ldr	r2, [sp, #4]
      count--;
 80015ec:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80015ee:	2a00      	cmp	r2, #0
      count--;
 80015f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	bf08      	it	eq
 80015f8:	4615      	moveq	r5, r2
 80015fa:	e7b9      	b.n	8001570 <SPI_WaitFlagStateUntilTimeout+0x28>
 80015fc:	20000000 	.word	0x20000000

08001600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b085      	sub	sp, #20
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001604:	460b      	mov	r3, r1
 8001606:	9200      	str	r2, [sp, #0]
{
 8001608:	460e      	mov	r6, r1
 800160a:	4617      	mov	r7, r2
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800160c:	2102      	movs	r1, #2
 800160e:	2201      	movs	r2, #1
{
 8001610:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001612:	f7ff ff99 	bl	8001548 <SPI_WaitFlagStateUntilTimeout>
 8001616:	4605      	mov	r5, r0
 8001618:	b128      	cbz	r0, 8001626 <SPI_EndRxTxTransaction+0x26>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800161a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800161c:	f043 0320 	orr.w	r3, r3, #32
 8001620:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001622:	2503      	movs	r5, #3
 8001624:	e015      	b.n	8001652 <SPI_EndRxTxTransaction+0x52>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001626:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <SPI_EndRxTxTransaction+0x70>)
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <SPI_EndRxTxTransaction+0x74>)
 800162c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001630:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001634:	4358      	muls	r0, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001636:	6863      	ldr	r3, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001638:	9003      	str	r0, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800163a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800163e:	d10b      	bne.n	8001658 <SPI_EndRxTxTransaction+0x58>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001640:	9700      	str	r7, [sp, #0]
 8001642:	4633      	mov	r3, r6
 8001644:	462a      	mov	r2, r5
 8001646:	2180      	movs	r1, #128	@ 0x80
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff ff7d 	bl	8001548 <SPI_WaitFlagStateUntilTimeout>
 800164e:	2800      	cmp	r0, #0
 8001650:	d1e3      	bne.n	800161a <SPI_EndRxTxTransaction+0x1a>
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8001652:	4628      	mov	r0, r5
 8001654:	b005      	add	sp, #20
 8001656:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8001658:	9b03      	ldr	r3, [sp, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f9      	beq.n	8001652 <SPI_EndRxTxTransaction+0x52>
      count--;
 800165e:	9b03      	ldr	r3, [sp, #12]
 8001660:	3b01      	subs	r3, #1
 8001662:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	061b      	lsls	r3, r3, #24
 800166a:	d4f5      	bmi.n	8001658 <SPI_EndRxTxTransaction+0x58>
 800166c:	e7f1      	b.n	8001652 <SPI_EndRxTxTransaction+0x52>
 800166e:	bf00      	nop
 8001670:	20000000 	.word	0x20000000
 8001674:	016e3600 	.word	0x016e3600

08001678 <HAL_SPI_Init>:
{
 8001678:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800167a:	4604      	mov	r4, r0
 800167c:	2800      	cmp	r0, #0
 800167e:	d055      	beq.n	800172c <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001680:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001682:	2b00      	cmp	r3, #0
 8001684:	d14e      	bne.n	8001724 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001686:	6842      	ldr	r2, [r0, #4]
 8001688:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800168c:	d000      	beq.n	8001690 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800168e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001694:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8001698:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800169c:	b923      	cbnz	r3, 80016a8 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800169e:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80016a2:	4620      	mov	r0, r4
 80016a4:	f7ff f8bc 	bl	8000820 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80016a8:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016aa:	68a0      	ldr	r0, [r4, #8]
 80016ac:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80016b4:	680b      	ldr	r3, [r1, #0]
 80016b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80016ba:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016bc:	6863      	ldr	r3, [r4, #4]
 80016be:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 80016c2:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80016c6:	4303      	orrs	r3, r0
 80016c8:	68e0      	ldr	r0, [r4, #12]
 80016ca:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 80016ce:	4303      	orrs	r3, r0
 80016d0:	6920      	ldr	r0, [r4, #16]
 80016d2:	f000 0002 	and.w	r0, r0, #2
 80016d6:	4303      	orrs	r3, r0
 80016d8:	6960      	ldr	r0, [r4, #20]
 80016da:	f000 0001 	and.w	r0, r0, #1
 80016de:	4303      	orrs	r3, r0
 80016e0:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 80016e4:	4303      	orrs	r3, r0
 80016e6:	69e0      	ldr	r0, [r4, #28]
 80016e8:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 80016ec:	4303      	orrs	r3, r0
 80016ee:	6a20      	ldr	r0, [r4, #32]
 80016f0:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80016f4:	4303      	orrs	r3, r0
 80016f6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80016f8:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 80016fc:	4303      	orrs	r3, r0
 80016fe:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001700:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001702:	0c12      	lsrs	r2, r2, #16
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	f002 0204 	and.w	r2, r2, #4
 800170c:	431a      	orrs	r2, r3
 800170e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001710:	69cb      	ldr	r3, [r1, #28]
 8001712:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001716:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001718:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800171a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800171c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800171e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8001722:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001724:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800172a:	e7b1      	b.n	8001690 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800172c:	2001      	movs	r0, #1
 800172e:	e7f8      	b.n	8001722 <HAL_SPI_Init+0xaa>

08001730 <HAL_SPI_Transmit>:
{
 8001730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001734:	4604      	mov	r4, r0
 8001736:	461f      	mov	r7, r3
 8001738:	460d      	mov	r5, r1
 800173a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 800173c:	f7ff f9be 	bl	8000abc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001740:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8001744:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001746:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001748:	b2d8      	uxtb	r0, r3
 800174a:	f040 809f 	bne.w	800188c <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 800174e:	2d00      	cmp	r5, #0
 8001750:	d074      	beq.n	800183c <HAL_SPI_Transmit+0x10c>
 8001752:	f1b8 0f00 	cmp.w	r8, #0
 8001756:	d071      	beq.n	800183c <HAL_SPI_Transmit+0x10c>
  __HAL_LOCK(hspi);
 8001758:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800175c:	2b01      	cmp	r3, #1
 800175e:	f000 8095 	beq.w	800188c <HAL_SPI_Transmit+0x15c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001762:	2303      	movs	r3, #3
 8001764:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001768:	2300      	movs	r3, #0
 800176a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 800176c:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8001770:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001774:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001776:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001778:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800177a:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800177c:	6826      	ldr	r6, [r4, #0]
  __HAL_LOCK(hspi);
 800177e:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001782:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001786:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001788:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800178c:	d107      	bne.n	800179e <HAL_SPI_Transmit+0x6e>
    __HAL_SPI_DISABLE(hspi);
 800178e:	6833      	ldr	r3, [r6, #0]
 8001790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001794:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8001796:	6833      	ldr	r3, [r6, #0]
 8001798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179c:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800179e:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017a0:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017a2:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80017a4:	bf5e      	ittt	pl
 80017a6:	6833      	ldrpl	r3, [r6, #0]
 80017a8:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80017ac:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017ae:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017b2:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017b4:	d145      	bne.n	8001842 <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017b6:	b113      	cbz	r3, 80017be <HAL_SPI_Transmit+0x8e>
 80017b8:	f1b8 0f01 	cmp.w	r8, #1
 80017bc:	d107      	bne.n	80017ce <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80017be:	f835 3b02 	ldrh.w	r3, [r5], #2
 80017c2:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017c4:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80017c6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80017ce:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b9d3      	cbnz	r3, 800180a <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80017d4:	464a      	mov	r2, r9
 80017d6:	4639      	mov	r1, r7
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff ff11 	bl	8001600 <SPI_EndRxTxTransaction>
 80017de:	2800      	cmp	r0, #0
 80017e0:	d151      	bne.n	8001886 <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80017e2:	68a3      	ldr	r3, [r4, #8]
 80017e4:	b933      	cbnz	r3, 80017f4 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	9201      	str	r2, [sp, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80017fa:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 80017fc:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80017fe:	1ac0      	subs	r0, r0, r3
  __HAL_UNLOCK(hspi);
 8001800:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001804:	bf18      	it	ne
 8001806:	2001      	movne	r0, #1
 8001808:	e018      	b.n	800183c <HAL_SPI_Transmit+0x10c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800180a:	6822      	ldr	r2, [r4, #0]
 800180c:	6893      	ldr	r3, [r2, #8]
 800180e:	0798      	lsls	r0, r3, #30
 8001810:	d505      	bpl.n	800181e <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001812:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001814:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001818:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800181a:	6323      	str	r3, [r4, #48]	@ 0x30
 800181c:	e7d3      	b.n	80017c6 <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800181e:	f7ff f94d 	bl	8000abc <HAL_GetTick>
 8001822:	eba0 0009 	sub.w	r0, r0, r9
 8001826:	42b8      	cmp	r0, r7
 8001828:	d3d1      	bcc.n	80017ce <HAL_SPI_Transmit+0x9e>
 800182a:	1c79      	adds	r1, r7, #1
 800182c:	d0cf      	beq.n	80017ce <HAL_SPI_Transmit+0x9e>
          hspi->State = HAL_SPI_STATE_READY;
 800182e:	2301      	movs	r3, #1
 8001830:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001834:	2300      	movs	r3, #0
 8001836:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 800183a:	2003      	movs	r0, #3
}
 800183c:	b003      	add	sp, #12
 800183e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001842:	b113      	cbz	r3, 800184a <HAL_SPI_Transmit+0x11a>
 8001844:	f1b8 0f01 	cmp.w	r8, #1
 8001848:	d108      	bne.n	800185c <HAL_SPI_Transmit+0x12c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800184a:	782b      	ldrb	r3, [r5, #0]
 800184c:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800184e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001850:	3301      	adds	r3, #1
 8001852:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8001854:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8001856:	3b01      	subs	r3, #1
 8001858:	b29b      	uxth	r3, r3
 800185a:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800185c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800185e:	b29b      	uxth	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0b7      	beq.n	80017d4 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	0792      	lsls	r2, r2, #30
 800186a:	d503      	bpl.n	8001874 <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800186c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800186e:	7812      	ldrb	r2, [r2, #0]
 8001870:	731a      	strb	r2, [r3, #12]
 8001872:	e7ec      	b.n	800184e <HAL_SPI_Transmit+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001874:	f7ff f922 	bl	8000abc <HAL_GetTick>
 8001878:	eba0 0009 	sub.w	r0, r0, r9
 800187c:	42b8      	cmp	r0, r7
 800187e:	d3ed      	bcc.n	800185c <HAL_SPI_Transmit+0x12c>
 8001880:	1c7b      	adds	r3, r7, #1
 8001882:	d0eb      	beq.n	800185c <HAL_SPI_Transmit+0x12c>
 8001884:	e7d3      	b.n	800182e <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001886:	2320      	movs	r3, #32
 8001888:	6563      	str	r3, [r4, #84]	@ 0x54
 800188a:	e7aa      	b.n	80017e2 <HAL_SPI_Transmit+0xb2>
    return HAL_BUSY;
 800188c:	2002      	movs	r0, #2
 800188e:	e7d5      	b.n	800183c <HAL_SPI_Transmit+0x10c>

08001890 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 8001890:	4770      	bx	lr
	...

08001894 <HAL_SPI_IRQHandler>:
{
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8001896:	6803      	ldr	r3, [r0, #0]
 8001898:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800189a:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800189c:	0656      	lsls	r6, r2, #25
{
 800189e:	b085      	sub	sp, #20
 80018a0:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80018a2:	ea4f 1192 	mov.w	r1, r2, lsr #6
 80018a6:	f3c2 1780 	ubfx	r7, r2, #6, #1
 80018aa:	d408      	bmi.n	80018be <HAL_SPI_IRQHandler+0x2a>
 80018ac:	07d6      	lsls	r6, r2, #31
 80018ae:	d506      	bpl.n	80018be <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80018b0:	066e      	lsls	r6, r5, #25
 80018b2:	d504      	bpl.n	80018be <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 80018b4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
}
 80018b6:	b005      	add	sp, #20
 80018b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 80018bc:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80018be:	0796      	lsls	r6, r2, #30
 80018c0:	d504      	bpl.n	80018cc <HAL_SPI_IRQHandler+0x38>
 80018c2:	0628      	lsls	r0, r5, #24
 80018c4:	d502      	bpl.n	80018cc <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 80018c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80018c8:	4620      	mov	r0, r4
 80018ca:	e7f4      	b.n	80018b6 <HAL_SPI_IRQHandler+0x22>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80018cc:	ea41 1152 	orr.w	r1, r1, r2, lsr #5
 80018d0:	f402 7080 	and.w	r0, r2, #256	@ 0x100
 80018d4:	f001 0101 	and.w	r1, r1, #1
 80018d8:	4301      	orrs	r1, r0
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80018da:	ea4f 1652 	mov.w	r6, r2, lsr #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80018de:	d057      	beq.n	8001990 <HAL_SPI_IRQHandler+0xfc>
 80018e0:	06aa      	lsls	r2, r5, #26
 80018e2:	d555      	bpl.n	8001990 <HAL_SPI_IRQHandler+0xfc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80018e4:	b17f      	cbz	r7, 8001906 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80018e6:	f894 2051 	ldrb.w	r2, [r4, #81]	@ 0x51
 80018ea:	2a03      	cmp	r2, #3
 80018ec:	f04f 0100 	mov.w	r1, #0
 80018f0:	d048      	beq.n	8001984 <HAL_SPI_IRQHandler+0xf0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80018f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80018f4:	f042 0204 	orr.w	r2, r2, #4
 80018f8:	6562      	str	r2, [r4, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018fa:	9100      	str	r1, [sp, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	9200      	str	r2, [sp, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	9200      	str	r2, [sp, #0]
 8001904:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001906:	07f1      	lsls	r1, r6, #31
 8001908:	d50c      	bpl.n	8001924 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800190a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	6562      	str	r2, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001912:	2200      	movs	r2, #0
 8001914:	9202      	str	r2, [sp, #8]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	9202      	str	r2, [sp, #8]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001924:	b140      	cbz	r0, 8001938 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001926:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001928:	f042 0208 	orr.w	r2, r2, #8
 800192c:	6562      	str	r2, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800192e:	2200      	movs	r2, #0
 8001930:	9203      	str	r2, [sp, #12]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	9203      	str	r2, [sp, #12]
 8001936:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001938:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800193a:	b34a      	cbz	r2, 8001990 <HAL_SPI_IRQHandler+0xfc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001942:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001944:	2201      	movs	r2, #1
 8001946:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800194a:	07aa      	lsls	r2, r5, #30
 800194c:	d022      	beq.n	8001994 <HAL_SPI_IRQHandler+0x100>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800194e:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001950:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001952:	f022 0203 	bic.w	r2, r2, #3
 8001956:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001958:	b140      	cbz	r0, 800196c <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <HAL_SPI_IRQHandler+0x108>)
 800195c:	6503      	str	r3, [r0, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800195e:	f7ff f9c1 	bl	8000ce4 <HAL_DMA_Abort_IT>
 8001962:	b118      	cbz	r0, 800196c <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001964:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800196a:	6563      	str	r3, [r4, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800196c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800196e:	b178      	cbz	r0, 8001990 <HAL_SPI_IRQHandler+0xfc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001970:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <HAL_SPI_IRQHandler+0x108>)
 8001972:	6503      	str	r3, [r0, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001974:	f7ff f9b6 	bl	8000ce4 <HAL_DMA_Abort_IT>
 8001978:	b150      	cbz	r0, 8001990 <HAL_SPI_IRQHandler+0xfc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800197a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800197c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001980:	6563      	str	r3, [r4, #84]	@ 0x54
 8001982:	e005      	b.n	8001990 <HAL_SPI_IRQHandler+0xfc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001984:	9101      	str	r1, [sp, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	9201      	str	r2, [sp, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	9b01      	ldr	r3, [sp, #4]
}
 8001990:	b005      	add	sp, #20
 8001992:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff ff7b 	bl	8001890 <HAL_SPI_ErrorCallback>
 800199a:	e7f9      	b.n	8001990 <HAL_SPI_IRQHandler+0xfc>
 800199c:	080019a1 	.word	0x080019a1

080019a0 <SPI_DMAAbortOnError>:
{
 80019a0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80019a2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hspi->RxXferCount = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80019a8:	86c3      	strh	r3, [r0, #54]	@ 0x36
  HAL_SPI_ErrorCallback(hspi);
 80019aa:	f7ff ff71 	bl	8001890 <HAL_SPI_ErrorCallback>
}
 80019ae:	bd08      	pop	{r3, pc}

080019b0 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 80019b0:	4770      	bx	lr

080019b2 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80019b2:	4770      	bx	lr

080019b4 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80019b4:	4770      	bx	lr

080019b6 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80019b6:	4770      	bx	lr

080019b8 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80019b8:	4770      	bx	lr

080019ba <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 80019ba:	6803      	ldr	r3, [r0, #0]
{
 80019bc:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80019be:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019c0:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019c2:	07b1      	lsls	r1, r6, #30
{
 80019c4:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019c6:	d50d      	bpl.n	80019e4 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019c8:	07aa      	lsls	r2, r5, #30
 80019ca:	d50b      	bpl.n	80019e4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019cc:	f06f 0202 	mvn.w	r2, #2
 80019d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019d2:	2201      	movs	r2, #1
 80019d4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	079b      	lsls	r3, r3, #30
 80019da:	d069      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 80019dc:	f7ff ffea 	bl	80019b4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019e0:	2300      	movs	r3, #0
 80019e2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019e4:	0771      	lsls	r1, r6, #29
 80019e6:	d510      	bpl.n	8001a0a <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019e8:	076a      	lsls	r2, r5, #29
 80019ea:	d50e      	bpl.n	8001a0a <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	f06f 0204 	mvn.w	r2, #4
 80019f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019f4:	2202      	movs	r2, #2
 80019f6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80019fe:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a00:	d05c      	beq.n	8001abc <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a02:	f7ff ffd7 	bl	80019b4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a06:	2300      	movs	r3, #0
 8001a08:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a0a:	0733      	lsls	r3, r6, #28
 8001a0c:	d50f      	bpl.n	8001a2e <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a0e:	0728      	lsls	r0, r5, #28
 8001a10:	d50d      	bpl.n	8001a2e <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	f06f 0208 	mvn.w	r2, #8
 8001a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001a22:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a24:	d050      	beq.n	8001ac8 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a26:	f7ff ffc5 	bl	80019b4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a2e:	06f2      	lsls	r2, r6, #27
 8001a30:	d510      	bpl.n	8001a54 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a32:	06eb      	lsls	r3, r5, #27
 8001a34:	d50e      	bpl.n	8001a54 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	f06f 0210 	mvn.w	r2, #16
 8001a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a3e:	2208      	movs	r2, #8
 8001a40:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001a48:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a4a:	d043      	beq.n	8001ad4 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4c:	f7ff ffb2 	bl	80019b4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a50:	2300      	movs	r3, #0
 8001a52:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a54:	07f0      	lsls	r0, r6, #31
 8001a56:	d508      	bpl.n	8001a6a <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a58:	07e9      	lsls	r1, r5, #31
 8001a5a:	d506      	bpl.n	8001a6a <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	f06f 0201 	mvn.w	r2, #1
 8001a62:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a64:	4620      	mov	r0, r4
 8001a66:	f7ff ffa3 	bl	80019b0 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001a6a:	0632      	lsls	r2, r6, #24
 8001a6c:	d508      	bpl.n	8001a80 <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a6e:	062b      	lsls	r3, r5, #24
 8001a70:	d506      	bpl.n	8001a80 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001a78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f000 f97d 	bl	8001d7a <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a80:	0670      	lsls	r0, r6, #25
 8001a82:	d508      	bpl.n	8001a96 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001a84:	0669      	lsls	r1, r5, #25
 8001a86:	d506      	bpl.n	8001a96 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001a8e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7ff ff91 	bl	80019b8 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a96:	06b2      	lsls	r2, r6, #26
 8001a98:	d522      	bpl.n	8001ae0 <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a9a:	06ab      	lsls	r3, r5, #26
 8001a9c:	d520      	bpl.n	8001ae0 <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001aa4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001aa6:	611a      	str	r2, [r3, #16]
}
 8001aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001aac:	f000 b964 	b.w	8001d78 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab0:	f7ff ff7f 	bl	80019b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7ff ff7e 	bl	80019b6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001aba:	e791      	b.n	80019e0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001abc:	f7ff ff79 	bl	80019b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff ff78 	bl	80019b6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ac6:	e79e      	b.n	8001a06 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac8:	f7ff ff73 	bl	80019b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff ff72 	bl	80019b6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ad2:	e7aa      	b.n	8001a2a <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad4:	f7ff ff6d 	bl	80019b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff ff6c 	bl	80019b6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ade:	e7b7      	b.n	8001a50 <HAL_TIM_IRQHandler+0x96>
}
 8001ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ae4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b64 <TIM_Base_SetConfig+0x80>)
  tmpcr1 = TIMx->CR1;
 8001ae6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ae8:	4290      	cmp	r0, r2
 8001aea:	d00e      	beq.n	8001b0a <TIM_Base_SetConfig+0x26>
 8001aec:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001af0:	d00b      	beq.n	8001b0a <TIM_Base_SetConfig+0x26>
 8001af2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001af6:	4290      	cmp	r0, r2
 8001af8:	d007      	beq.n	8001b0a <TIM_Base_SetConfig+0x26>
 8001afa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001afe:	4290      	cmp	r0, r2
 8001b00:	d003      	beq.n	8001b0a <TIM_Base_SetConfig+0x26>
 8001b02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b06:	4290      	cmp	r0, r2
 8001b08:	d108      	bne.n	8001b1c <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001b0a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b10:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b12:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	e00a      	b.n	8001b32 <TIM_Base_SetConfig+0x4e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b1c:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <TIM_Base_SetConfig+0x84>)
 8001b1e:	4290      	cmp	r0, r2
 8001b20:	d0f7      	beq.n	8001b12 <TIM_Base_SetConfig+0x2e>
 8001b22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b26:	4290      	cmp	r0, r2
 8001b28:	d0f3      	beq.n	8001b12 <TIM_Base_SetConfig+0x2e>
 8001b2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b2e:	4290      	cmp	r0, r2
 8001b30:	d0ef      	beq.n	8001b12 <TIM_Base_SetConfig+0x2e>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b32:	694a      	ldr	r2, [r1, #20]
 8001b34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b38:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001b3a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b3c:	688b      	ldr	r3, [r1, #8]
 8001b3e:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b40:	680b      	ldr	r3, [r1, #0]
 8001b42:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <TIM_Base_SetConfig+0x80>)
 8001b46:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b48:	bf04      	itt	eq
 8001b4a:	690b      	ldreq	r3, [r1, #16]
 8001b4c:	6303      	streq	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001b52:	6903      	ldr	r3, [r0, #16]
 8001b54:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b56:	bf42      	ittt	mi
 8001b58:	6903      	ldrmi	r3, [r0, #16]
 8001b5a:	f023 0301 	bicmi.w	r3, r3, #1
 8001b5e:	6103      	strmi	r3, [r0, #16]
  }
}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40010000 	.word	0x40010000
 8001b68:	40014000 	.word	0x40014000

08001b6c <HAL_TIM_Base_Init>:
{
 8001b6c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001b6e:	4604      	mov	r4, r0
 8001b70:	b330      	cbz	r0, 8001bc0 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001b72:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001b76:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001b7a:	b91b      	cbnz	r3, 8001b84 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001b7c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001b80:	f7fe feac 	bl	80008dc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001b84:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b86:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b8c:	1d21      	adds	r1, r4, #4
 8001b8e:	f7ff ffa9 	bl	8001ae4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8001b98:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001b9e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001ba2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001ba6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001baa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001bae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001bb2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001bb6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001bba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8001bbe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	e7fc      	b.n	8001bbe <HAL_TIM_Base_Init+0x52>

08001bc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001bc4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001bc6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bc8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bca:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bce:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001bd2:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001bd4:	6082      	str	r2, [r0, #8]
}
 8001bd6:	bd10      	pop	{r4, pc}

08001bd8 <HAL_TIM_ConfigClockSource>:
{
 8001bd8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001bda:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001bde:	2b01      	cmp	r3, #1
{
 8001be0:	4604      	mov	r4, r0
 8001be2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001be6:	f000 808e 	beq.w	8001d06 <HAL_TIM_ConfigClockSource+0x12e>
  htim->State = HAL_TIM_STATE_BUSY;
 8001bea:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8001bee:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8001bf0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001bf2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001bf6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bf8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001bfc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001c00:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001c02:	680b      	ldr	r3, [r1, #0]
 8001c04:	2b60      	cmp	r3, #96	@ 0x60
 8001c06:	d04f      	beq.n	8001ca8 <HAL_TIM_ConfigClockSource+0xd0>
 8001c08:	d832      	bhi.n	8001c70 <HAL_TIM_ConfigClockSource+0x98>
 8001c0a:	2b40      	cmp	r3, #64	@ 0x40
 8001c0c:	d064      	beq.n	8001cd8 <HAL_TIM_ConfigClockSource+0x100>
 8001c0e:	d816      	bhi.n	8001c3e <HAL_TIM_ConfigClockSource+0x66>
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d00d      	beq.n	8001c30 <HAL_TIM_ConfigClockSource+0x58>
 8001c14:	d80a      	bhi.n	8001c2c <HAL_TIM_ConfigClockSource+0x54>
 8001c16:	f033 0110 	bics.w	r1, r3, #16
 8001c1a:	d009      	beq.n	8001c30 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001c22:	2300      	movs	r3, #0
 8001c24:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001c28:	4610      	mov	r0, r2
 8001c2a:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8001c2c:	2b30      	cmp	r3, #48	@ 0x30
 8001c2e:	d1f5      	bne.n	8001c1c <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8001c30:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c32:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8001c3c:	e028      	b.n	8001c90 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8001c3e:	2b50      	cmp	r3, #80	@ 0x50
 8001c40:	d1ec      	bne.n	8001c1c <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8001c42:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001c44:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c46:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c48:	6a03      	ldr	r3, [r0, #32]
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c50:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c52:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c5a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001c5e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001c60:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c62:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001c64:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c6a:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8001c6e:	e00f      	b.n	8001c90 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8001c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c74:	d00d      	beq.n	8001c92 <HAL_TIM_ConfigClockSource+0xba>
 8001c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c7a:	d00c      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0xbe>
 8001c7c:	2b70      	cmp	r3, #112	@ 0x70
 8001c7e:	d1cd      	bne.n	8001c1c <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8001c80:	68cb      	ldr	r3, [r1, #12]
 8001c82:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001c86:	f7ff ff9d 	bl	8001bc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c8a:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001c90:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001c92:	2200      	movs	r2, #0
 8001c94:	e7c2      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8001c96:	68cb      	ldr	r3, [r1, #12]
 8001c98:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001c9c:	f7ff ff92 	bl	8001bc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ca0:	6883      	ldr	r3, [r0, #8]
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ca6:	e7f3      	b.n	8001c90 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8001ca8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001caa:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8001cac:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001cae:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cb0:	f022 0210 	bic.w	r2, r2, #16
 8001cb4:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cb6:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cb8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cbc:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cc0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cc4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001cc8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cca:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001ccc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cd2:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8001cd6:	e7db      	b.n	8001c90 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8001cd8:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001cda:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001cdc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cde:	6a03      	ldr	r3, [r0, #32]
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ce6:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ce8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cf0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001cf4:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001cf6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cf8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001cfa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d00:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8001d04:	e7c4      	b.n	8001c90 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8001d06:	4602      	mov	r2, r0
 8001d08:	e78e      	b.n	8001c28 <HAL_TIM_ConfigClockSource+0x50>
	...

08001d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d0c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d0e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001d12:	2b01      	cmp	r3, #1
{
 8001d14:	4602      	mov	r2, r0
 8001d16:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001d1a:	d02a      	beq.n	8001d72 <HAL_TIMEx_MasterConfigSynchronization+0x66>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d1c:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d1e:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001d22:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d24:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001d26:	6898      	ldr	r0, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d28:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d2c:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d2e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d30:	4c10      	ldr	r4, [pc, #64]	@ (8001d74 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8001d32:	42a3      	cmp	r3, r4
 8001d34:	d012      	beq.n	8001d5c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8001d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d3a:	d00f      	beq.n	8001d5c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8001d3c:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 8001d40:	42a3      	cmp	r3, r4
 8001d42:	d00b      	beq.n	8001d5c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8001d44:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001d48:	42a3      	cmp	r3, r4
 8001d4a:	d007      	beq.n	8001d5c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8001d4c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001d50:	42a3      	cmp	r3, r4
 8001d52:	d003      	beq.n	8001d5c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8001d54:	f504 349a 	add.w	r4, r4, #78848	@ 0x13400
 8001d58:	42a3      	cmp	r3, r4
 8001d5a:	d104      	bne.n	8001d66 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d5c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d5e:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d62:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d64:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d66:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001d68:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d6a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001d6e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8001d72:	bd30      	pop	{r4, r5, pc}
 8001d74:	40010000 	.word	0x40010000

08001d78 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8001d78:	4770      	bx	lr

08001d7a <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8001d7a:	4770      	bx	lr

08001d7c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d7c:	6802      	ldr	r2, [r0, #0]
 8001d7e:	68c1      	ldr	r1, [r0, #12]
{
 8001d80:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d82:	6913      	ldr	r3, [r2, #16]
 8001d84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	6113      	str	r3, [r2, #16]
{
 8001d8c:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d8e:	6883      	ldr	r3, [r0, #8]
 8001d90:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001d92:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d94:	4303      	orrs	r3, r0
 8001d96:	6968      	ldr	r0, [r5, #20]
 8001d98:	4303      	orrs	r3, r0
 8001d9a:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001d9c:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8001da0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001da4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001da6:	430b      	orrs	r3, r1
 8001da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001daa:	6953      	ldr	r3, [r2, #20]
 8001dac:	69a9      	ldr	r1, [r5, #24]
 8001dae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001db2:	430b      	orrs	r3, r1
 8001db4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001db6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e34 <UART_SetConfig+0xb8>)
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d003      	beq.n	8001dc4 <UART_SetConfig+0x48>
 8001dbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d124      	bne.n	8001e0e <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001dc4:	f7ff fbb0 	bl	8001528 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dc8:	69ea      	ldr	r2, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dca:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dcc:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dd0:	e9d5 4300 	ldrd	r4, r3, [r5]
 8001dd4:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dd8:	d11c      	bne.n	8001e14 <UART_SetConfig+0x98>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dda:	18da      	adds	r2, r3, r3
 8001ddc:	f04f 0500 	mov.w	r5, #0
 8001de0:	eb45 0305 	adc.w	r3, r5, r5
 8001de4:	f7fe f9f8 	bl	80001d8 <__aeabi_uldivmod>
 8001de8:	2264      	movs	r2, #100	@ 0x64
 8001dea:	fbb0 f1f2 	udiv	r1, r0, r2
 8001dee:	fb02 0311 	mls	r3, r2, r1, r0
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	3332      	adds	r3, #50	@ 0x32
 8001df6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dfa:	f003 0207 	and.w	r2, r3, #7
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001e04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001e08:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e0a:	60a3      	str	r3, [r4, #8]
  }
}
 8001e0c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e0e:	f7ff fb7b 	bl	8001508 <HAL_RCC_GetPCLK1Freq>
 8001e12:	e7d9      	b.n	8001dc8 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e14:	009a      	lsls	r2, r3, #2
 8001e16:	0f9b      	lsrs	r3, r3, #30
 8001e18:	f7fe f9de 	bl	80001d8 <__aeabi_uldivmod>
 8001e1c:	2264      	movs	r2, #100	@ 0x64
 8001e1e:	fbb0 f1f2 	udiv	r1, r0, r2
 8001e22:	fb02 0311 	mls	r3, r2, r1, r0
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	3332      	adds	r3, #50	@ 0x32
 8001e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e2e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001e32:	e7ea      	b.n	8001e0a <UART_SetConfig+0x8e>
 8001e34:	40011000 	.word	0x40011000

08001e38 <HAL_UART_Init>:
{
 8001e38:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001e3a:	4604      	mov	r4, r0
 8001e3c:	b348      	cbz	r0, 8001e92 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e3e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001e42:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e46:	b91b      	cbnz	r3, 8001e50 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001e48:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001e4c:	f7fe fd66 	bl	800091c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001e50:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e52:	2324      	movs	r3, #36	@ 0x24
 8001e54:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001e58:	68d3      	ldr	r3, [r2, #12]
 8001e5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001e5e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7ff ff8b 	bl	8001d7c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e76:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e7e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e80:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001e82:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e84:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e86:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e8a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e8e:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001e90:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e92:	2001      	movs	r0, #1
 8001e94:	e7fc      	b.n	8001e90 <HAL_UART_Init+0x58>
	...

08001e98 <LCD_Write_Command>:
#include "ili9341.h"

void LCD_Write_Command(uint8_t cmd)
{
 8001e98:	b513      	push	{r0, r1, r4, lr}
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001e9a:	4c0e      	ldr	r4, [pc, #56]	@ (8001ed4 <LCD_Write_Command+0x3c>)
{
 8001e9c:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	f7ff f8b3 	bl	8001010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001eaa:	480b      	ldr	r0, [pc, #44]	@ (8001ed8 <LCD_Write_Command+0x40>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	2110      	movs	r1, #16
 8001eb0:	f7ff f8ae 	bl	8001010 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(LCD_SPI_HANDLE, &cmd, 1, HAL_MAX_DELAY);
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	f10d 0107 	add.w	r1, sp, #7
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4807      	ldr	r0, [pc, #28]	@ (8001edc <LCD_Write_Command+0x44>)
 8001ec0:	f7ff fc36 	bl	8001730 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7ff f8a1 	bl	8001010 <HAL_GPIO_WritePin>
}
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd10      	pop	{r4, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	20000118 	.word	0x20000118

08001ee0 <LCD_Write_Data>:

void LCD_Write_Data(uint8_t data)
{
 8001ee0:	b513      	push	{r0, r1, r4, lr}
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001ee2:	4c0e      	ldr	r4, [pc, #56]	@ (8001f1c <LCD_Write_Data+0x3c>)
{
 8001ee4:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4620      	mov	r0, r4
 8001eec:	2104      	movs	r1, #4
 8001eee:	f7ff f88f 	bl	8001010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001ef2:	480b      	ldr	r0, [pc, #44]	@ (8001f20 <LCD_Write_Data+0x40>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2110      	movs	r1, #16
 8001ef8:	f7ff f88a 	bl	8001010 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(LCD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295
 8001f00:	f10d 0107 	add.w	r1, sp, #7
 8001f04:	2201      	movs	r2, #1
 8001f06:	4807      	ldr	r0, [pc, #28]	@ (8001f24 <LCD_Write_Data+0x44>)
 8001f08:	f7ff fc12 	bl	8001730 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2104      	movs	r1, #4
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7ff f87d 	bl	8001010 <HAL_GPIO_WritePin>
}
 8001f16:	b002      	add	sp, #8
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40020400 	.word	0x40020400
 8001f20:	40020800 	.word	0x40020800
 8001f24:	20000118 	.word	0x20000118

08001f28 <LCD_Write_Data16>:

void LCD_Write_Data16(uint16_t data)
{
 8001f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t data_h = (data >> 8);
  uint8_t data_l = data & 0xFF;

  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f2a:	4c14      	ldr	r4, [pc, #80]	@ (8001f7c <LCD_Write_Data16+0x54>)
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(LCD_SPI_HANDLE, &data_h, 1, HAL_MAX_DELAY);
 8001f2c:	4d14      	ldr	r5, [pc, #80]	@ (8001f80 <LCD_Write_Data16+0x58>)
  uint8_t data_l = data & 0xFF;
 8001f2e:	f88d 0007 	strb.w	r0, [sp, #7]
  uint8_t data_h = (data >> 8);
 8001f32:	0a03      	lsrs	r3, r0, #8
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f34:	2200      	movs	r2, #0
 8001f36:	4620      	mov	r0, r4
 8001f38:	2104      	movs	r1, #4
  uint8_t data_h = (data >> 8);
 8001f3a:	f88d 3006 	strb.w	r3, [sp, #6]
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f3e:	f7ff f867 	bl	8001010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001f42:	4810      	ldr	r0, [pc, #64]	@ (8001f84 <LCD_Write_Data16+0x5c>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	2110      	movs	r1, #16
 8001f48:	f7ff f862 	bl	8001010 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(LCD_SPI_HANDLE, &data_h, 1, HAL_MAX_DELAY);
 8001f4c:	f10d 0106 	add.w	r1, sp, #6
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295
 8001f54:	2201      	movs	r2, #1
 8001f56:	4628      	mov	r0, r5
 8001f58:	f7ff fbea 	bl	8001730 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(LCD_SPI_HANDLE, &data_l, 1, HAL_MAX_DELAY);
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f60:	f10d 0107 	add.w	r1, sp, #7
 8001f64:	2201      	movs	r2, #1
 8001f66:	4628      	mov	r0, r5
 8001f68:	f7ff fbe2 	bl	8001730 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2104      	movs	r1, #4
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7ff f84d 	bl	8001010 <HAL_GPIO_WritePin>
}
 8001f76:	b003      	add	sp, #12
 8001f78:	bd30      	pop	{r4, r5, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	20000118 	.word	0x20000118
 8001f84:	40020800 	.word	0x40020800

08001f88 <LCD_Reset>:

void LCD_Reset(void)
{
 8001f88:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001f8a:	4c09      	ldr	r4, [pc, #36]	@ (8001fb0 <LCD_Reset+0x28>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4620      	mov	r0, r4
 8001f92:	f7ff f83d 	bl	8001010 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001f96:	2064      	movs	r0, #100	@ 0x64
 8001f98:	f7fe fd96 	bl	8000ac8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	f7ff f835 	bl	8001010 <HAL_GPIO_WritePin>
  HAL_Delay(100);
}
 8001fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(100);
 8001faa:	2064      	movs	r0, #100	@ 0x64
 8001fac:	f7fe bd8c 	b.w	8000ac8 <HAL_Delay>
 8001fb0:	40020400 	.word	0x40020400

08001fb4 <LCD_SetWindow>:

void LCD_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	4607      	mov	r7, r0
  /* Cài đặt vùng cột */
  LCD_Write_Command(0x2A);  // Column Address Set
 8001fb8:	202a      	movs	r0, #42	@ 0x2a
{
 8001fba:	460d      	mov	r5, r1
 8001fbc:	4616      	mov	r6, r2
 8001fbe:	461c      	mov	r4, r3
  LCD_Write_Command(0x2A);  // Column Address Set
 8001fc0:	f7ff ff6a 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data16(x0);
 8001fc4:	4638      	mov	r0, r7
 8001fc6:	f7ff ffaf 	bl	8001f28 <LCD_Write_Data16>
  LCD_Write_Data16(x1);
 8001fca:	4630      	mov	r0, r6
 8001fcc:	f7ff ffac 	bl	8001f28 <LCD_Write_Data16>

  /* Cài đặt vùng hàng */
  LCD_Write_Command(0x2B);  // Row Address Set
 8001fd0:	202b      	movs	r0, #43	@ 0x2b
 8001fd2:	f7ff ff61 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data16(y0);
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f7ff ffa6 	bl	8001f28 <LCD_Write_Data16>
  LCD_Write_Data16(y1);
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f7ff ffa3 	bl	8001f28 <LCD_Write_Data16>

  /* Bắt đầu ghi dữ liệu */
  LCD_Write_Command(0x2C);  // Memory Write
}
 8001fe2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LCD_Write_Command(0x2C);  // Memory Write
 8001fe6:	202c      	movs	r0, #44	@ 0x2c
 8001fe8:	f7ff bf56 	b.w	8001e98 <LCD_Write_Command>

08001fec <LCD_Fill>:

void LCD_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8001fec:	b570      	push	{r4, r5, r6, lr}
  uint32_t total_pixels = (x1 - x0 + 1) * (y1 - y0 + 1);
 8001fee:	1a15      	subs	r5, r2, r0
 8001ff0:	1a5c      	subs	r4, r3, r1
{
 8001ff2:	f8bd 6010 	ldrh.w	r6, [sp, #16]

  LCD_SetWindow(x0, y0, x1, y1);
 8001ff6:	f7ff ffdd 	bl	8001fb4 <LCD_SetWindow>

  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001ffa:	480e      	ldr	r0, [pc, #56]	@ (8002034 <LCD_Fill+0x48>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2104      	movs	r1, #4
 8002000:	f7ff f806 	bl	8001010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002004:	480c      	ldr	r0, [pc, #48]	@ (8002038 <LCD_Fill+0x4c>)
 8002006:	2201      	movs	r2, #1
 8002008:	2110      	movs	r1, #16
 800200a:	f7ff f801 	bl	8001010 <HAL_GPIO_WritePin>
  uint32_t total_pixels = (x1 - x0 + 1) * (y1 - y0 + 1);
 800200e:	3401      	adds	r4, #1
 8002010:	fb05 4404 	mla	r4, r5, r4, r4

  for (uint32_t i = 0; i < total_pixels; i++) {
 8002014:	2500      	movs	r5, #0
 8002016:	42a5      	cmp	r5, r4
 8002018:	d106      	bne.n	8002028 <LCD_Fill+0x3c>
    LCD_Write_Data16(color);
  }

  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 800201a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <LCD_Fill+0x48>)
 8002020:	2201      	movs	r2, #1
 8002022:	2104      	movs	r1, #4
 8002024:	f7fe bff4 	b.w	8001010 <HAL_GPIO_WritePin>
    LCD_Write_Data16(color);
 8002028:	4630      	mov	r0, r6
 800202a:	f7ff ff7d 	bl	8001f28 <LCD_Write_Data16>
  for (uint32_t i = 0; i < total_pixels; i++) {
 800202e:	3501      	adds	r5, #1
 8002030:	e7f1      	b.n	8002016 <LCD_Fill+0x2a>
 8002032:	bf00      	nop
 8002034:	40020400 	.word	0x40020400
 8002038:	40020800 	.word	0x40020800

0800203c <LCD_Clear>:

void LCD_Clear(uint16_t color)
{
 800203c:	b507      	push	{r0, r1, r2, lr}
  LCD_Fill(0, 0, ILI9341_WIDTH - 1, ILI9341_HEIGHT - 1, color);
 800203e:	2100      	movs	r1, #0
 8002040:	9000      	str	r0, [sp, #0]
 8002042:	23ef      	movs	r3, #239	@ 0xef
 8002044:	f240 123f 	movw	r2, #319	@ 0x13f
 8002048:	4608      	mov	r0, r1
 800204a:	f7ff ffcf 	bl	8001fec <LCD_Fill>
}
 800204e:	b003      	add	sp, #12
 8002050:	f85d fb04 	ldr.w	pc, [sp], #4

08002054 <LCD_Init>:

void LCD_Init(void)
{
 8002054:	b508      	push	{r3, lr}
  /* Khởi tạo phần cứng */
  LCD_Reset();
 8002056:	f7ff ff97 	bl	8001f88 <LCD_Reset>

  /* Chuỗi lệnh khởi tạo LCD */
  LCD_Write_Command(0x01);  // Software Reset
 800205a:	2001      	movs	r0, #1
 800205c:	f7ff ff1c 	bl	8001e98 <LCD_Write_Command>
  HAL_Delay(100);
 8002060:	2064      	movs	r0, #100	@ 0x64
 8002062:	f7fe fd31 	bl	8000ac8 <HAL_Delay>

  LCD_Write_Command(0xCF);  // Power Control B
 8002066:	20cf      	movs	r0, #207	@ 0xcf
 8002068:	f7ff ff16 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x00);
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff ff37 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0xC1);
 8002072:	20c1      	movs	r0, #193	@ 0xc1
 8002074:	f7ff ff34 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x30);
 8002078:	2030      	movs	r0, #48	@ 0x30
 800207a:	f7ff ff31 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xED);  // Power on sequence control
 800207e:	20ed      	movs	r0, #237	@ 0xed
 8002080:	f7ff ff0a 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x64);
 8002084:	2064      	movs	r0, #100	@ 0x64
 8002086:	f7ff ff2b 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x03);
 800208a:	2003      	movs	r0, #3
 800208c:	f7ff ff28 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x12);
 8002090:	2012      	movs	r0, #18
 8002092:	f7ff ff25 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x81);
 8002096:	2081      	movs	r0, #129	@ 0x81
 8002098:	f7ff ff22 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xE8);  // Driver timing control A
 800209c:	20e8      	movs	r0, #232	@ 0xe8
 800209e:	f7ff fefb 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x85);
 80020a2:	2085      	movs	r0, #133	@ 0x85
 80020a4:	f7ff ff1c 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x00);
 80020a8:	2000      	movs	r0, #0
 80020aa:	f7ff ff19 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x78);
 80020ae:	2078      	movs	r0, #120	@ 0x78
 80020b0:	f7ff ff16 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xCB);  // Power Control A
 80020b4:	20cb      	movs	r0, #203	@ 0xcb
 80020b6:	f7ff feef 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x39);
 80020ba:	2039      	movs	r0, #57	@ 0x39
 80020bc:	f7ff ff10 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x2C);
 80020c0:	202c      	movs	r0, #44	@ 0x2c
 80020c2:	f7ff ff0d 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x00);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff ff0a 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x34);
 80020cc:	2034      	movs	r0, #52	@ 0x34
 80020ce:	f7ff ff07 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x02);
 80020d2:	2002      	movs	r0, #2
 80020d4:	f7ff ff04 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xF7);  // Pump ratio control
 80020d8:	20f7      	movs	r0, #247	@ 0xf7
 80020da:	f7ff fedd 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x20);
 80020de:	2020      	movs	r0, #32
 80020e0:	f7ff fefe 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xEA);  // Driver timing control B
 80020e4:	20ea      	movs	r0, #234	@ 0xea
 80020e6:	f7ff fed7 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x00);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff fef8 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x00);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff fef5 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xC0);  // Power Control 1
 80020f6:	20c0      	movs	r0, #192	@ 0xc0
 80020f8:	f7ff fece 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x23);
 80020fc:	2023      	movs	r0, #35	@ 0x23
 80020fe:	f7ff feef 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xC1);  // Power Control 2
 8002102:	20c1      	movs	r0, #193	@ 0xc1
 8002104:	f7ff fec8 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x10);
 8002108:	2010      	movs	r0, #16
 800210a:	f7ff fee9 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xC5);  // VCOM Control 1
 800210e:	20c5      	movs	r0, #197	@ 0xc5
 8002110:	f7ff fec2 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x3E);
 8002114:	203e      	movs	r0, #62	@ 0x3e
 8002116:	f7ff fee3 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x28);
 800211a:	2028      	movs	r0, #40	@ 0x28
 800211c:	f7ff fee0 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xC7);  // VCOM Control 2
 8002120:	20c7      	movs	r0, #199	@ 0xc7
 8002122:	f7ff feb9 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x86);
 8002126:	2086      	movs	r0, #134	@ 0x86
 8002128:	f7ff feda 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0x36);  // Memory Access Control
 800212c:	2036      	movs	r0, #54	@ 0x36
 800212e:	f7ff feb3 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x48);     // config rotation (0x48 or 0x050)
 8002132:	2048      	movs	r0, #72	@ 0x48
 8002134:	f7ff fed4 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0x3A);  // Pixel Format Set
 8002138:	203a      	movs	r0, #58	@ 0x3a
 800213a:	f7ff fead 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x55);     // 16-bit color
 800213e:	2055      	movs	r0, #85	@ 0x55
 8002140:	f7ff fece 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xB1);  // Frame Rate Control
 8002144:	20b1      	movs	r0, #177	@ 0xb1
 8002146:	f7ff fea7 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x00);
 800214a:	2000      	movs	r0, #0
 800214c:	f7ff fec8 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x18);
 8002150:	2018      	movs	r0, #24
 8002152:	f7ff fec5 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xB6);  // Display Function Control
 8002156:	20b6      	movs	r0, #182	@ 0xb6
 8002158:	f7ff fe9e 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x08);
 800215c:	2008      	movs	r0, #8
 800215e:	f7ff febf 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x82);
 8002162:	2082      	movs	r0, #130	@ 0x82
 8002164:	f7ff febc 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x27);
 8002168:	2027      	movs	r0, #39	@ 0x27
 800216a:	f7ff feb9 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xF2);  // 3Gamma Function Disable
 800216e:	20f2      	movs	r0, #242	@ 0xf2
 8002170:	f7ff fe92 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x00);
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff feb3 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0x26);  // Gamma curve selected
 800217a:	2026      	movs	r0, #38	@ 0x26
 800217c:	f7ff fe8c 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x01);
 8002180:	2001      	movs	r0, #1
 8002182:	f7ff fead 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xE0);  // Set Gamma
 8002186:	20e0      	movs	r0, #224	@ 0xe0
 8002188:	f7ff fe86 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x0F);
 800218c:	200f      	movs	r0, #15
 800218e:	f7ff fea7 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x31);
 8002192:	2031      	movs	r0, #49	@ 0x31
 8002194:	f7ff fea4 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x2B);
 8002198:	202b      	movs	r0, #43	@ 0x2b
 800219a:	f7ff fea1 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x0C);
 800219e:	200c      	movs	r0, #12
 80021a0:	f7ff fe9e 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x0E);
 80021a4:	200e      	movs	r0, #14
 80021a6:	f7ff fe9b 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x08);
 80021aa:	2008      	movs	r0, #8
 80021ac:	f7ff fe98 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x4E);
 80021b0:	204e      	movs	r0, #78	@ 0x4e
 80021b2:	f7ff fe95 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0xF1);
 80021b6:	20f1      	movs	r0, #241	@ 0xf1
 80021b8:	f7ff fe92 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x37);
 80021bc:	2037      	movs	r0, #55	@ 0x37
 80021be:	f7ff fe8f 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x07);
 80021c2:	2007      	movs	r0, #7
 80021c4:	f7ff fe8c 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x10);
 80021c8:	2010      	movs	r0, #16
 80021ca:	f7ff fe89 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x03);
 80021ce:	2003      	movs	r0, #3
 80021d0:	f7ff fe86 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x0E);
 80021d4:	200e      	movs	r0, #14
 80021d6:	f7ff fe83 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x09);
 80021da:	2009      	movs	r0, #9
 80021dc:	f7ff fe80 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x00);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7ff fe7d 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0xE1);  // Set Gamma
 80021e6:	20e1      	movs	r0, #225	@ 0xe1
 80021e8:	f7ff fe56 	bl	8001e98 <LCD_Write_Command>
  LCD_Write_Data(0x00);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff fe77 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x0E);
 80021f2:	200e      	movs	r0, #14
 80021f4:	f7ff fe74 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x14);
 80021f8:	2014      	movs	r0, #20
 80021fa:	f7ff fe71 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x03);
 80021fe:	2003      	movs	r0, #3
 8002200:	f7ff fe6e 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x11);
 8002204:	2011      	movs	r0, #17
 8002206:	f7ff fe6b 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x07);
 800220a:	2007      	movs	r0, #7
 800220c:	f7ff fe68 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x31);
 8002210:	2031      	movs	r0, #49	@ 0x31
 8002212:	f7ff fe65 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0xC1);
 8002216:	20c1      	movs	r0, #193	@ 0xc1
 8002218:	f7ff fe62 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x48);
 800221c:	2048      	movs	r0, #72	@ 0x48
 800221e:	f7ff fe5f 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x08);
 8002222:	2008      	movs	r0, #8
 8002224:	f7ff fe5c 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x0F);
 8002228:	200f      	movs	r0, #15
 800222a:	f7ff fe59 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x0C);
 800222e:	200c      	movs	r0, #12
 8002230:	f7ff fe56 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x31);
 8002234:	2031      	movs	r0, #49	@ 0x31
 8002236:	f7ff fe53 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x36);
 800223a:	2036      	movs	r0, #54	@ 0x36
 800223c:	f7ff fe50 	bl	8001ee0 <LCD_Write_Data>
  LCD_Write_Data(0x0F);
 8002240:	200f      	movs	r0, #15
 8002242:	f7ff fe4d 	bl	8001ee0 <LCD_Write_Data>

  LCD_Write_Command(0x11);  // Exit Sleep
 8002246:	2011      	movs	r0, #17
 8002248:	f7ff fe26 	bl	8001e98 <LCD_Write_Command>
  HAL_Delay(120);
 800224c:	2078      	movs	r0, #120	@ 0x78
 800224e:	f7fe fc3b 	bl	8000ac8 <HAL_Delay>

  LCD_Write_Command(0x29);  // Display On
 8002252:	2029      	movs	r0, #41	@ 0x29
 8002254:	f7ff fe20 	bl	8001e98 <LCD_Write_Command>
  HAL_Delay(20);
}
 8002258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(20);
 800225c:	2014      	movs	r0, #20
 800225e:	f7fe bc33 	b.w	8000ac8 <HAL_Delay>

08002262 <Draw_Big_N>:
  uint16_t g = (color >> 5) & 0x3F;  // 6 green bit 
  uint16_t b = color & 0x1F;         // 5 blue bit
  return (b << 11) | (g << 5) | r;   // convert to BGR
}
void Draw_Big_N(uint16_t x0, uint16_t y0, uint16_t width, uint16_t height, uint16_t color)
{
 8002262:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t thickness = width / 5;  

  LCD_Fill(x0, y0, x0 + thickness - 1, y0 + height - 1, color);
 8002266:	f103 3aff 	add.w	sl, r3, #4294967295
{
 800226a:	4616      	mov	r6, r2
  LCD_Fill(x0, y0, x0 + thickness - 1, y0 + height - 1, color);
 800226c:	448a      	add	sl, r1
  uint16_t thickness = width / 5;  
 800226e:	2505      	movs	r5, #5
 8002270:	fbb2 f5f5 	udiv	r5, r2, r5
  LCD_Fill(x0, y0, x0 + thickness - 1, y0 + height - 1, color);
 8002274:	1e42      	subs	r2, r0, #1
{
 8002276:	f8bd 9030 	ldrh.w	r9, [sp, #48]	@ 0x30
  LCD_Fill(x0, y0, x0 + thickness - 1, y0 + height - 1, color);
 800227a:	f8cd 9000 	str.w	r9, [sp]
 800227e:	fa1f fa8a 	uxth.w	sl, sl
 8002282:	442a      	add	r2, r5
{
 8002284:	4607      	mov	r7, r0
 8002286:	4698      	mov	r8, r3
  LCD_Fill(x0, y0, x0 + thickness - 1, y0 + height - 1, color);
 8002288:	b292      	uxth	r2, r2
 800228a:	4653      	mov	r3, sl
{
 800228c:	460c      	mov	r4, r1
  LCD_Fill(x0, y0, x0 + thickness - 1, y0 + height - 1, color);
 800228e:	f7ff fead 	bl	8001fec <LCD_Fill>

  LCD_Fill(x0 + width - thickness, y0, x0 + width - 1, y0 + height - 1, color);
 8002292:	19f1      	adds	r1, r6, r7
 8002294:	b289      	uxth	r1, r1
 8002296:	1b48      	subs	r0, r1, r5
 8002298:	1e4a      	subs	r2, r1, #1
 800229a:	4653      	mov	r3, sl
 800229c:	f8cd 9000 	str.w	r9, [sp]
 80022a0:	b292      	uxth	r2, r2
 80022a2:	4621      	mov	r1, r4
 80022a4:	b280      	uxth	r0, r0
 80022a6:	f7ff fea1 	bl	8001fec <LCD_Fill>

  for (uint16_t i = 0; i < height; i++) {
 80022aa:	eb04 0a08 	add.w	sl, r4, r8
 80022ae:	1b76      	subs	r6, r6, r5
 80022b0:	fa1f fa8a 	uxth.w	sl, sl
 80022b4:	f04f 0b00 	mov.w	fp, #0
    uint16_t diagonal_width = (i * (width - thickness)) / height;
    LCD_Fill(x0 + diagonal_width, y0 + i, x0 + diagonal_width + thickness - 1, y0 + i, color);
 80022b8:	3d01      	subs	r5, #1
  for (uint16_t i = 0; i < height; i++) {
 80022ba:	4554      	cmp	r4, sl
 80022bc:	d102      	bne.n	80022c4 <Draw_Big_N+0x62>
  }
}
 80022be:	b003      	add	sp, #12
 80022c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint16_t diagonal_width = (i * (width - thickness)) / height;
 80022c4:	fb9b f0f8 	sdiv	r0, fp, r8
    LCD_Fill(x0 + diagonal_width, y0 + i, x0 + diagonal_width + thickness - 1, y0 + i, color);
 80022c8:	4438      	add	r0, r7
 80022ca:	fa15 f280 	uxtah	r2, r5, r0
 80022ce:	4623      	mov	r3, r4
 80022d0:	4621      	mov	r1, r4
 80022d2:	f8cd 9000 	str.w	r9, [sp]
 80022d6:	b292      	uxth	r2, r2
 80022d8:	b280      	uxth	r0, r0
 80022da:	3401      	adds	r4, #1
 80022dc:	f7ff fe86 	bl	8001fec <LCD_Fill>
  for (uint16_t i = 0; i < height; i++) {
 80022e0:	44b3      	add	fp, r6
 80022e2:	b2a4      	uxth	r4, r4
 80022e4:	e7e9      	b.n	80022ba <Draw_Big_N+0x58>
	...

080022e8 <LCD_DrawChar>:

void LCD_DrawChar(uint16_t x, uint16_t y, char ch, uint16_t textColor, uint16_t bgColor)
{
 80022e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ec:	9301      	str	r3, [sp, #4]
  if (ch < 32 || ch > 127) {
 80022ee:	f1a2 0320 	sub.w	r3, r2, #32
    ch = '?'; // repalce undefine char to '?' 
 80022f2:	2b5f      	cmp	r3, #95	@ 0x5f
 80022f4:	bf88      	it	hi
 80022f6:	223f      	movhi	r2, #63	@ 0x3f
  }

  // everey char is 5 bytes in font
  uint8_t const *char_ptr = &Font5x7[(ch - 32) * 5];
 80022f8:	4c19      	ldr	r4, [pc, #100]	@ (8002360 <LCD_DrawChar+0x78>)
{
 80022fa:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
  uint8_t const *char_ptr = &Font5x7[(ch - 32) * 5];
 80022fe:	3a20      	subs	r2, #32
 8002300:	eb02 0282 	add.w	r2, r2, r2, lsl #2
{
 8002304:	4605      	mov	r5, r0
 8002306:	460e      	mov	r6, r1
  uint8_t const *char_ptr = &Font5x7[(ch - 32) * 5];
 8002308:	4414      	add	r4, r2
 800230a:	f04f 0900 	mov.w	r9, #0

    // display pixel
    for (uint8_t row = 0; row < 8; row++) {
      if (col_data & (1 << row)) {
        // if pixel is on , draw pixel with color of char
        LCD_SetWindow(x + col, y + row, x + col, y + row);
 800230e:	eb05 0209 	add.w	r2, r5, r9
    uint8_t col_data = char_ptr[col];
 8002312:	f814 b009 	ldrb.w	fp, [r4, r9]
 8002316:	f04f 0a00 	mov.w	sl, #0
        LCD_SetWindow(x + col, y + row, x + col, y + row);
 800231a:	b297      	uxth	r7, r2
      if (col_data & (1 << row)) {
 800231c:	fa4b f10a 	asr.w	r1, fp, sl
        LCD_SetWindow(x + col, y + row, x + col, y + row);
 8002320:	eb06 030a 	add.w	r3, r6, sl
 8002324:	b29b      	uxth	r3, r3
      if (col_data & (1 << row)) {
 8002326:	f011 0f01 	tst.w	r1, #1
        LCD_SetWindow(x + col, y + row, x + col, y + row);
 800232a:	463a      	mov	r2, r7
 800232c:	4619      	mov	r1, r3
 800232e:	4638      	mov	r0, r7
      if (col_data & (1 << row)) {
 8002330:	d011      	beq.n	8002356 <LCD_DrawChar+0x6e>
        LCD_SetWindow(x + col, y + row, x + col, y + row);
 8002332:	f7ff fe3f 	bl	8001fb4 <LCD_SetWindow>
        LCD_Write_Data16(textColor);
 8002336:	9801      	ldr	r0, [sp, #4]
    for (uint8_t row = 0; row < 8; row++) {
 8002338:	f10a 0a01 	add.w	sl, sl, #1
      } else {
        // if pixel is off , draw pixel with color of background
        LCD_SetWindow(x + col, y + row, x + col, y + row);
        LCD_Write_Data16(bgColor);
 800233c:	f7ff fdf4 	bl	8001f28 <LCD_Write_Data16>
    for (uint8_t row = 0; row < 8; row++) {
 8002340:	f1ba 0f08 	cmp.w	sl, #8
 8002344:	d1ea      	bne.n	800231c <LCD_DrawChar+0x34>
  for (uint8_t col = 0; col < 5; col++) {
 8002346:	f109 0901 	add.w	r9, r9, #1
 800234a:	f1b9 0f05 	cmp.w	r9, #5
 800234e:	d1de      	bne.n	800230e <LCD_DrawChar+0x26>
      }
    }
  }
}
 8002350:	b003      	add	sp, #12
 8002352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LCD_SetWindow(x + col, y + row, x + col, y + row);
 8002356:	f7ff fe2d 	bl	8001fb4 <LCD_SetWindow>
        LCD_Write_Data16(bgColor);
 800235a:	4640      	mov	r0, r8
 800235c:	e7ec      	b.n	8002338 <LCD_DrawChar+0x50>
 800235e:	bf00      	nop
 8002360:	08002559 	.word	0x08002559

08002364 <LCD_DisplayString>:
void LCD_DisplayString(uint16_t x, uint16_t y, const char *str, uint16_t textColor, uint16_t bgColor)
{
 8002364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002368:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 800236c:	4604      	mov	r4, r0
 800236e:	460e      	mov	r6, r1
 8002370:	461f      	mov	r7, r3
 8002372:	1e55      	subs	r5, r2, #1
  uint16_t current_x = x;
  while (*str) {
 8002374:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002378:	b15a      	cbz	r2, 8002392 <LCD_DisplayString+0x2e>
    LCD_DrawChar(current_x, y, *str, textColor, bgColor);
 800237a:	4620      	mov	r0, r4
    current_x += 6;
 800237c:	3406      	adds	r4, #6
    LCD_DrawChar(current_x, y, *str, textColor, bgColor);
 800237e:	f8cd 8000 	str.w	r8, [sp]
 8002382:	463b      	mov	r3, r7
 8002384:	4631      	mov	r1, r6
    current_x += 6;
 8002386:	b2a4      	uxth	r4, r4
    LCD_DrawChar(current_x, y, *str, textColor, bgColor);
 8002388:	f7ff ffae 	bl	80022e8 <LCD_DrawChar>
    str++;
    if (current_x + 5 >= ILI9341_WIDTH) {
 800238c:	f5b4 7f9d 	cmp.w	r4, #314	@ 0x13a
 8002390:	d9f0      	bls.n	8002374 <LCD_DisplayString+0x10>
      break;
    }
  }
}
 8002392:	b002      	add	sp, #8
 8002394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002398 <Fill_Screen>:
void Fill_Screen(uint16_t color)
{
 8002398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  LCD_SetWindow(0, 0, ILI9341_WIDTH - 1, ILI9341_HEIGHT - 1);
 800239a:	2100      	movs	r1, #0
 800239c:	23ef      	movs	r3, #239	@ 0xef
{
 800239e:	4604      	mov	r4, r0
  LCD_SetWindow(0, 0, ILI9341_WIDTH - 1, ILI9341_HEIGHT - 1);
 80023a0:	f240 123f 	movw	r2, #319	@ 0x13f
 80023a4:	4608      	mov	r0, r1
 80023a6:	f7ff fe05 	bl	8001fb4 <LCD_SetWindow>

  uint32_t total_pixels = ILI9341_WIDTH * ILI9341_HEIGHT;

  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80023aa:	4816      	ldr	r0, [pc, #88]	@ (8002404 <Fill_Screen+0x6c>)

  for (uint32_t i = 0; i < total_pixels; i++) {
    uint8_t high_byte = color >> 8;
    uint8_t low_byte = color & 0xFF;

    HAL_SPI_Transmit(LCD_SPI_HANDLE, &high_byte, 1, HAL_MAX_DELAY);
 80023ac:	4e16      	ldr	r6, [pc, #88]	@ (8002408 <Fill_Screen+0x70>)
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2104      	movs	r1, #4
 80023b2:	f7fe fe2d 	bl	8001010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80023b6:	4815      	ldr	r0, [pc, #84]	@ (800240c <Fill_Screen+0x74>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	2110      	movs	r1, #16
 80023bc:	f7fe fe28 	bl	8001010 <HAL_GPIO_WritePin>
    uint8_t high_byte = color >> 8;
 80023c0:	0a27      	lsrs	r7, r4, #8
 80023c2:	f44f 3596 	mov.w	r5, #76800	@ 0x12c00
    HAL_SPI_Transmit(LCD_SPI_HANDLE, &high_byte, 1, HAL_MAX_DELAY);
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	2201      	movs	r2, #1
 80023cc:	f10d 0106 	add.w	r1, sp, #6
 80023d0:	4630      	mov	r0, r6
    uint8_t high_byte = color >> 8;
 80023d2:	f88d 7006 	strb.w	r7, [sp, #6]
    uint8_t low_byte = color & 0xFF;
 80023d6:	f88d 4007 	strb.w	r4, [sp, #7]
    HAL_SPI_Transmit(LCD_SPI_HANDLE, &high_byte, 1, HAL_MAX_DELAY);
 80023da:	f7ff f9a9 	bl	8001730 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(LCD_SPI_HANDLE, &low_byte, 1, HAL_MAX_DELAY);
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	2201      	movs	r2, #1
 80023e4:	f10d 0107 	add.w	r1, sp, #7
 80023e8:	4630      	mov	r0, r6
 80023ea:	f7ff f9a1 	bl	8001730 <HAL_SPI_Transmit>
  for (uint32_t i = 0; i < total_pixels; i++) {
 80023ee:	3d01      	subs	r5, #1
 80023f0:	d1e9      	bne.n	80023c6 <Fill_Screen+0x2e>
  }

  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80023f2:	4804      	ldr	r0, [pc, #16]	@ (8002404 <Fill_Screen+0x6c>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	2104      	movs	r1, #4
}
 80023f8:	b003      	add	sp, #12
 80023fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80023fe:	f7fe be07 	b.w	8001010 <HAL_GPIO_WritePin>
 8002402:	bf00      	nop
 8002404:	40020400 	.word	0x40020400
 8002408:	20000118 	.word	0x20000118
 800240c:	40020800 	.word	0x40020800

08002410 <LCD_DrawImage>:

void LCD_DrawImage(uint16_t x, uint16_t y, const Image *img)
{
 8002410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002412:	4614      	mov	r4, r2
  LCD_SetWindow(x, y, x + img->width - 1, y + img->height - 1);
 8002414:	8852      	ldrh	r2, [r2, #2]
 8002416:	8825      	ldrh	r5, [r4, #0]
    color = RGB_TO_BGR(color);
    
    uint8_t high_byte = color >> 8;
    uint8_t low_byte = color & 0xFF;
    
    HAL_SPI_Transmit(LCD_SPI_HANDLE, &high_byte, 1, HAL_MAX_DELAY);
 8002418:	4f20      	ldr	r7, [pc, #128]	@ (800249c <LCD_DrawImage+0x8c>)
  LCD_SetWindow(x, y, x + img->width - 1, y + img->height - 1);
 800241a:	1e4b      	subs	r3, r1, #1
 800241c:	4413      	add	r3, r2
 800241e:	1e42      	subs	r2, r0, #1
 8002420:	442a      	add	r2, r5
 8002422:	b29b      	uxth	r3, r3
 8002424:	b292      	uxth	r2, r2
 8002426:	f7ff fdc5 	bl	8001fb4 <LCD_SetWindow>
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800242a:	481d      	ldr	r0, [pc, #116]	@ (80024a0 <LCD_DrawImage+0x90>)
 800242c:	2200      	movs	r2, #0
 800242e:	2104      	movs	r1, #4
 8002430:	f7fe fdee 	bl	8001010 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002434:	481b      	ldr	r0, [pc, #108]	@ (80024a4 <LCD_DrawImage+0x94>)
 8002436:	2201      	movs	r2, #1
 8002438:	2110      	movs	r1, #16
 800243a:	f7fe fde9 	bl	8001010 <HAL_GPIO_WritePin>
  uint32_t total_pixels = img->width * img->height;
 800243e:	8826      	ldrh	r6, [r4, #0]
 8002440:	8863      	ldrh	r3, [r4, #2]
  for (uint32_t i = 0; i < total_pixels; i++) {
 8002442:	2500      	movs	r5, #0
  uint32_t total_pixels = img->width * img->height;
 8002444:	435e      	muls	r6, r3
  for (uint32_t i = 0; i < total_pixels; i++) {
 8002446:	42b5      	cmp	r5, r6
 8002448:	d107      	bne.n	800245a <LCD_DrawImage+0x4a>
    HAL_SPI_Transmit(LCD_SPI_HANDLE, &low_byte, 1, HAL_MAX_DELAY);
  }
  
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800244a:	4815      	ldr	r0, [pc, #84]	@ (80024a0 <LCD_DrawImage+0x90>)
 800244c:	2201      	movs	r2, #1
 800244e:	2104      	movs	r1, #4
}
 8002450:	b003      	add	sp, #12
 8002452:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002456:	f7fe bddb 	b.w	8001010 <HAL_GPIO_WritePin>
    uint16_t color = img->data[i];
 800245a:	6863      	ldr	r3, [r4, #4]
 800245c:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
    color = RGB_TO_BGR(color);
 8002460:	02cb      	lsls	r3, r1, #11
 8002462:	f401 62fc 	and.w	r2, r1, #2016	@ 0x7e0
 8002466:	ea42 22d1 	orr.w	r2, r2, r1, lsr #11
 800246a:	b29b      	uxth	r3, r3
 800246c:	4313      	orrs	r3, r2
    uint8_t high_byte = color >> 8;
 800246e:	0a1a      	lsrs	r2, r3, #8
 8002470:	f88d 2006 	strb.w	r2, [sp, #6]
    uint8_t low_byte = color & 0xFF;
 8002474:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_SPI_Transmit(LCD_SPI_HANDLE, &high_byte, 1, HAL_MAX_DELAY);
 8002478:	2201      	movs	r2, #1
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	f10d 0106 	add.w	r1, sp, #6
 8002482:	4638      	mov	r0, r7
 8002484:	f7ff f954 	bl	8001730 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(LCD_SPI_HANDLE, &low_byte, 1, HAL_MAX_DELAY);
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
 800248c:	2201      	movs	r2, #1
 800248e:	f10d 0107 	add.w	r1, sp, #7
 8002492:	4638      	mov	r0, r7
 8002494:	f7ff f94c 	bl	8001730 <HAL_SPI_Transmit>
  for (uint32_t i = 0; i < total_pixels; i++) {
 8002498:	3501      	adds	r5, #1
 800249a:	e7d4      	b.n	8002446 <LCD_DrawImage+0x36>
 800249c:	20000118 	.word	0x20000118
 80024a0:	40020400 	.word	0x40020400
 80024a4:	40020800 	.word	0x40020800

080024a8 <memset>:
 80024a8:	4402      	add	r2, r0
 80024aa:	4603      	mov	r3, r0
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d100      	bne.n	80024b2 <memset+0xa>
 80024b0:	4770      	bx	lr
 80024b2:	f803 1b01 	strb.w	r1, [r3], #1
 80024b6:	e7f9      	b.n	80024ac <memset+0x4>

080024b8 <__libc_init_array>:
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	4d0d      	ldr	r5, [pc, #52]	@ (80024f0 <__libc_init_array+0x38>)
 80024bc:	4c0d      	ldr	r4, [pc, #52]	@ (80024f4 <__libc_init_array+0x3c>)
 80024be:	1b64      	subs	r4, r4, r5
 80024c0:	10a4      	asrs	r4, r4, #2
 80024c2:	2600      	movs	r6, #0
 80024c4:	42a6      	cmp	r6, r4
 80024c6:	d109      	bne.n	80024dc <__libc_init_array+0x24>
 80024c8:	4d0b      	ldr	r5, [pc, #44]	@ (80024f8 <__libc_init_array+0x40>)
 80024ca:	4c0c      	ldr	r4, [pc, #48]	@ (80024fc <__libc_init_array+0x44>)
 80024cc:	f000 f818 	bl	8002500 <_init>
 80024d0:	1b64      	subs	r4, r4, r5
 80024d2:	10a4      	asrs	r4, r4, #2
 80024d4:	2600      	movs	r6, #0
 80024d6:	42a6      	cmp	r6, r4
 80024d8:	d105      	bne.n	80024e6 <__libc_init_array+0x2e>
 80024da:	bd70      	pop	{r4, r5, r6, pc}
 80024dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e0:	4798      	blx	r3
 80024e2:	3601      	adds	r6, #1
 80024e4:	e7ee      	b.n	80024c4 <__libc_init_array+0xc>
 80024e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ea:	4798      	blx	r3
 80024ec:	3601      	adds	r6, #1
 80024ee:	e7f2      	b.n	80024d6 <__libc_init_array+0x1e>
 80024f0:	08027f4c 	.word	0x08027f4c
 80024f4:	08027f4c 	.word	0x08027f4c
 80024f8:	08027f4c 	.word	0x08027f4c
 80024fc:	08027f50 	.word	0x08027f50

08002500 <_init>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr

0800250c <_fini>:
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250e:	bf00      	nop
 8002510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002512:	bc08      	pop	{r3}
 8002514:	469e      	mov	lr, r3
 8002516:	4770      	bx	lr
